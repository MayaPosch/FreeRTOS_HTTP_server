ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ethernetif.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC0:
  17 0000 45746849 		.ascii	"EthIf\000"
  17      6600
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.low_level_output,"ax",%progbits
  22              		.align	1
  23              		.arch armv7e-m
  24              		.syntax unified
  25              		.thumb
  26              		.thumb_func
  27              		.fpu fpv5-sp-d16
  29              	low_level_output:
  30              	.LVL0:
  31              	.LFB174:
  32              		.file 1 "Core/Src/ethernetif.c"
   1:Core/Src/ethernetif.c **** /**
   2:Core/Src/ethernetif.c ****   ******************************************************************************
   3:Core/Src/ethernetif.c ****   * @file    LwIP/LwIP_HTTP_Server_Netconn_RTOS/Src/ethernetif.c
   4:Core/Src/ethernetif.c ****   * @author  MCD Application Team
   5:Core/Src/ethernetif.c ****   * @brief   This file implements Ethernet network interface drivers for lwIP
   6:Core/Src/ethernetif.c ****   ******************************************************************************
   7:Core/Src/ethernetif.c ****   * @attention
   8:Core/Src/ethernetif.c ****   *
   9:Core/Src/ethernetif.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics International N.V. 
  10:Core/Src/ethernetif.c ****   * All rights reserved.</center></h2>
  11:Core/Src/ethernetif.c ****   *
  12:Core/Src/ethernetif.c ****   * Redistribution and use in source and binary forms, with or without 
  13:Core/Src/ethernetif.c ****   * modification, are permitted, provided that the following conditions are met:
  14:Core/Src/ethernetif.c ****   *
  15:Core/Src/ethernetif.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  16:Core/Src/ethernetif.c ****   *    this list of conditions and the following disclaimer.
  17:Core/Src/ethernetif.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  18:Core/Src/ethernetif.c ****   *    this list of conditions and the following disclaimer in the documentation
  19:Core/Src/ethernetif.c ****   *    and/or other materials provided with the distribution.
  20:Core/Src/ethernetif.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  21:Core/Src/ethernetif.c ****   *    contributors to this software may be used to endorse or promote products 
  22:Core/Src/ethernetif.c ****   *    derived from this software without specific written permission.
  23:Core/Src/ethernetif.c ****   * 4. This software, including modifications and/or derivative works of this 
  24:Core/Src/ethernetif.c ****   *    software, must execute solely and exclusively on microcontroller or
  25:Core/Src/ethernetif.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 2


  26:Core/Src/ethernetif.c ****   * 5. Redistribution and use of this software other than as permitted under 
  27:Core/Src/ethernetif.c ****   *    this license is void and will automatically terminate your rights under 
  28:Core/Src/ethernetif.c ****   *    this license. 
  29:Core/Src/ethernetif.c ****   *
  30:Core/Src/ethernetif.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  31:Core/Src/ethernetif.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  32:Core/Src/ethernetif.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  33:Core/Src/ethernetif.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  34:Core/Src/ethernetif.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  35:Core/Src/ethernetif.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  36:Core/Src/ethernetif.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  37:Core/Src/ethernetif.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  38:Core/Src/ethernetif.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  39:Core/Src/ethernetif.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  40:Core/Src/ethernetif.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  41:Core/Src/ethernetif.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  42:Core/Src/ethernetif.c ****   *
  43:Core/Src/ethernetif.c ****   ******************************************************************************
  44:Core/Src/ethernetif.c ****   */
  45:Core/Src/ethernetif.c **** 
  46:Core/Src/ethernetif.c **** /* Includes ------------------------------------------------------------------*/
  47:Core/Src/ethernetif.c **** #include "stm32f7xx_hal.h"
  48:Core/Src/ethernetif.c **** #include "lwip/opt.h"
  49:Core/Src/ethernetif.c **** #include "lwip/timeouts.h"
  50:Core/Src/ethernetif.c **** #include "lwip/tcpip.h"
  51:Core/Src/ethernetif.c **** #include "netif/ethernet.h"
  52:Core/Src/ethernetif.c **** #include "netif/etharp.h"
  53:Core/Src/ethernetif.c **** #include "ethernetif.h"
  54:Core/Src/ethernetif.c **** #include <string.h>
  55:Core/Src/ethernetif.c **** 
  56:Core/Src/ethernetif.c **** /* Private typedef -----------------------------------------------------------*/
  57:Core/Src/ethernetif.c **** /* Private define ------------------------------------------------------------*/
  58:Core/Src/ethernetif.c **** /* The time to block waiting for input. */
  59:Core/Src/ethernetif.c **** #define TIME_WAITING_FOR_INPUT                 ( osWaitForever )
  60:Core/Src/ethernetif.c **** /* Stack size of the interface thread */
  61:Core/Src/ethernetif.c **** #define INTERFACE_THREAD_STACK_SIZE            ( 350 )
  62:Core/Src/ethernetif.c **** 
  63:Core/Src/ethernetif.c **** /* Define those to better describe your network interface. */
  64:Core/Src/ethernetif.c **** #define IFNAME0 's'
  65:Core/Src/ethernetif.c **** #define IFNAME1 't'
  66:Core/Src/ethernetif.c **** 
  67:Core/Src/ethernetif.c **** /* Private macro -------------------------------------------------------------*/
  68:Core/Src/ethernetif.c **** /* Private variables ---------------------------------------------------------*/
  69:Core/Src/ethernetif.c **** /*
  70:Core/Src/ethernetif.c ****   @Note: The DMARxDscrTab and DMATxDscrTab must be declared in a device non cacheable memory region
  71:Core/Src/ethernetif.c ****          In this example they are declared in the first 256 Byte of SRAM2 memory, so this
  72:Core/Src/ethernetif.c ****          memory region is configured by MPU as a device memory.
  73:Core/Src/ethernetif.c **** 
  74:Core/Src/ethernetif.c ****          In this example the ETH buffers are located in the SRAM2 with MPU configured as normal 
  75:Core/Src/ethernetif.c ****          not cacheable memory.   
  76:Core/Src/ethernetif.c ****          
  77:Core/Src/ethernetif.c ****          Please refer to MPU_Config() in main.c file.
  78:Core/Src/ethernetif.c ****  */
  79:Core/Src/ethernetif.c **** #if defined ( __CC_ARM   )
  80:Core/Src/ethernetif.c **** ETH_DMADescTypeDef  DMARxDscrTab[ETH_RXBUFNB] __attribute__((at(0x2004C000)));/* Ethernet Rx DMA De
  81:Core/Src/ethernetif.c **** 
  82:Core/Src/ethernetif.c **** ETH_DMADescTypeDef  DMATxDscrTab[ETH_TXBUFNB] __attribute__((at(0x2004C080)));/* Ethernet Tx DMA De
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 3


  83:Core/Src/ethernetif.c **** 
  84:Core/Src/ethernetif.c **** uint8_t Rx_Buff[ETH_RXBUFNB][ETH_RX_BUF_SIZE] __attribute__((at(0x2004C100))); /* Ethernet Receive 
  85:Core/Src/ethernetif.c **** 
  86:Core/Src/ethernetif.c **** uint8_t Tx_Buff[ETH_TXBUFNB][ETH_TX_BUF_SIZE] __attribute__((at(0x2004D8D0))); /* Ethernet Transmit
  87:Core/Src/ethernetif.c **** 
  88:Core/Src/ethernetif.c **** #elif defined ( __ICCARM__ ) /*!< IAR Compiler */
  89:Core/Src/ethernetif.c ****   #pragma data_alignment=4 
  90:Core/Src/ethernetif.c **** 
  91:Core/Src/ethernetif.c **** #pragma location=0x2004C000
  92:Core/Src/ethernetif.c **** __no_init ETH_DMADescTypeDef  DMARxDscrTab[ETH_RXBUFNB];/* Ethernet Rx DMA Descriptors */
  93:Core/Src/ethernetif.c **** 
  94:Core/Src/ethernetif.c **** #pragma location=0x2004C080
  95:Core/Src/ethernetif.c **** __no_init ETH_DMADescTypeDef  DMATxDscrTab[ETH_TXBUFNB];/* Ethernet Tx DMA Descriptors */
  96:Core/Src/ethernetif.c **** 
  97:Core/Src/ethernetif.c **** #pragma location=0x2004C100
  98:Core/Src/ethernetif.c **** __no_init uint8_t Rx_Buff[ETH_RXBUFNB][ETH_RX_BUF_SIZE]; /* Ethernet Receive Buffers */
  99:Core/Src/ethernetif.c **** 
 100:Core/Src/ethernetif.c **** #pragma location=0x2004D8D0
 101:Core/Src/ethernetif.c **** __no_init uint8_t Tx_Buff[ETH_TXBUFNB][ETH_TX_BUF_SIZE]; /* Ethernet Transmit Buffers */
 102:Core/Src/ethernetif.c **** 
 103:Core/Src/ethernetif.c **** #elif defined ( __GNUC__ ) /*!< GNU Compiler */
 104:Core/Src/ethernetif.c **** 
 105:Core/Src/ethernetif.c **** ETH_DMADescTypeDef  DMARxDscrTab[ETH_RXBUFNB] __attribute__((section(".RxDecripSection")));/* Ether
 106:Core/Src/ethernetif.c **** 
 107:Core/Src/ethernetif.c **** ETH_DMADescTypeDef  DMATxDscrTab[ETH_TXBUFNB] __attribute__((section(".TxDescripSection")));/* Ethe
 108:Core/Src/ethernetif.c **** 
 109:Core/Src/ethernetif.c **** uint8_t Rx_Buff[ETH_RXBUFNB][ETH_RX_BUF_SIZE] __attribute__((section(".RxarraySection"))); /* Ether
 110:Core/Src/ethernetif.c **** 
 111:Core/Src/ethernetif.c **** uint8_t Tx_Buff[ETH_TXBUFNB][ETH_TX_BUF_SIZE] __attribute__((section(".TxarraySection"))); /* Ether
 112:Core/Src/ethernetif.c **** 
 113:Core/Src/ethernetif.c **** #endif
 114:Core/Src/ethernetif.c **** 
 115:Core/Src/ethernetif.c **** /* Semaphore to signal incoming packets */
 116:Core/Src/ethernetif.c **** osSemaphoreId s_xSemaphore = NULL;
 117:Core/Src/ethernetif.c **** 
 118:Core/Src/ethernetif.c **** /* Global Ethernet handle*/
 119:Core/Src/ethernetif.c **** ETH_HandleTypeDef EthHandle;
 120:Core/Src/ethernetif.c **** 
 121:Core/Src/ethernetif.c **** /* Private function prototypes -----------------------------------------------*/
 122:Core/Src/ethernetif.c **** static void ethernetif_input( void const * argument );
 123:Core/Src/ethernetif.c **** 
 124:Core/Src/ethernetif.c **** /* Private functions ---------------------------------------------------------*/
 125:Core/Src/ethernetif.c **** /*******************************************************************************
 126:Core/Src/ethernetif.c ****                        Ethernet MSP Routines
 127:Core/Src/ethernetif.c **** *******************************************************************************/
 128:Core/Src/ethernetif.c **** /**
 129:Core/Src/ethernetif.c ****   * @brief  Initializes the ETH MSP.
 130:Core/Src/ethernetif.c ****   * @param  heth: ETH handle
 131:Core/Src/ethernetif.c ****   * @retval None
 132:Core/Src/ethernetif.c ****   */
 133:Core/Src/ethernetif.c **** void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
 134:Core/Src/ethernetif.c **** {
 135:Core/Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 136:Core/Src/ethernetif.c ****   
 137:Core/Src/ethernetif.c ****   /* Enable GPIOs clocks */
 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 4


 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 141:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 142:Core/Src/ethernetif.c **** 
 143:Core/Src/ethernetif.c **** /* Ethernet pins configuration ************************************************/
 144:Core/Src/ethernetif.c ****   /*
 145:Core/Src/ethernetif.c ****         RMII_REF_CLK ----------------------> PA1
 146:Core/Src/ethernetif.c ****         RMII_MDIO -------------------------> PA2
 147:Core/Src/ethernetif.c ****         RMII_MDC --------------------------> PC1
 148:Core/Src/ethernetif.c ****         RMII_MII_CRS_DV -------------------> PA7
 149:Core/Src/ethernetif.c ****         RMII_MII_RXD0 ---------------------> PC4
 150:Core/Src/ethernetif.c ****         RMII_MII_RXD1 ---------------------> PC5
 151:Core/Src/ethernetif.c ****         RMII_MII_RXER ---------------------> PG2
 152:Core/Src/ethernetif.c ****         RMII_MII_TX_EN --------------------> PG11
 153:Core/Src/ethernetif.c ****         RMII_MII_TXD0 ---------------------> PG13
 154:Core/Src/ethernetif.c ****         RMII_MII_TXD1 ---------------------> PB13
 155:Core/Src/ethernetif.c ****   */
 156:Core/Src/ethernetif.c **** 
 157:Core/Src/ethernetif.c ****   /* Configure PA1, PA2 and PA7 */
 158:Core/Src/ethernetif.c ****   GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 159:Core/Src/ethernetif.c ****   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 160:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pull = GPIO_NOPULL; 
 161:Core/Src/ethernetif.c ****   GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 162:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 163:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 164:Core/Src/ethernetif.c ****   
 165:Core/Src/ethernetif.c ****   /* Configure PB13 */
 166:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pin = GPIO_PIN_13;
 167:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 168:Core/Src/ethernetif.c ****   
 169:Core/Src/ethernetif.c ****   /* Configure PC1, PC4 and PC5 */
 170:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 171:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 172:Core/Src/ethernetif.c **** 
 173:Core/Src/ethernetif.c ****   /* Configure PG2, PG11, PG13 and PG14 */
 174:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 175:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 176:Core/Src/ethernetif.c ****   
 177:Core/Src/ethernetif.c ****   /* Enable the Ethernet global Interrupt */
 178:Core/Src/ethernetif.c ****   HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 179:Core/Src/ethernetif.c ****   HAL_NVIC_EnableIRQ(ETH_IRQn);
 180:Core/Src/ethernetif.c ****   
 181:Core/Src/ethernetif.c ****   /* Enable ETHERNET clock  */
 182:Core/Src/ethernetif.c ****   __HAL_RCC_ETH_CLK_ENABLE();
 183:Core/Src/ethernetif.c **** }
 184:Core/Src/ethernetif.c **** 
 185:Core/Src/ethernetif.c **** /**
 186:Core/Src/ethernetif.c ****   * @brief  Ethernet Rx Transfer completed callback
 187:Core/Src/ethernetif.c ****   * @param  heth: ETH handle
 188:Core/Src/ethernetif.c ****   * @retval None
 189:Core/Src/ethernetif.c ****   */
 190:Core/Src/ethernetif.c **** void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
 191:Core/Src/ethernetif.c **** {
 192:Core/Src/ethernetif.c ****   osSemaphoreRelease(s_xSemaphore);
 193:Core/Src/ethernetif.c **** }
 194:Core/Src/ethernetif.c **** 
 195:Core/Src/ethernetif.c **** /*******************************************************************************
 196:Core/Src/ethernetif.c ****                        LL Driver Interface ( LwIP stack --> ETH) 
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 5


 197:Core/Src/ethernetif.c **** *******************************************************************************/
 198:Core/Src/ethernetif.c **** /**
 199:Core/Src/ethernetif.c ****   * @brief In this function, the hardware should be initialized.
 200:Core/Src/ethernetif.c ****   * Called from ethernetif_init().
 201:Core/Src/ethernetif.c ****   *
 202:Core/Src/ethernetif.c ****   * @param netif the already initialized lwip network interface structure
 203:Core/Src/ethernetif.c ****   *        for this ethernetif
 204:Core/Src/ethernetif.c ****   */
 205:Core/Src/ethernetif.c **** static void low_level_init(struct netif *netif)
 206:Core/Src/ethernetif.c **** {
 207:Core/Src/ethernetif.c ****   uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 208:Core/Src/ethernetif.c ****   
 209:Core/Src/ethernetif.c ****   EthHandle.Instance = ETH;  
 210:Core/Src/ethernetif.c ****   EthHandle.Init.MACAddr = macaddress;
 211:Core/Src/ethernetif.c ****   EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 212:Core/Src/ethernetif.c ****   EthHandle.Init.Speed = ETH_SPEED_100M;
 213:Core/Src/ethernetif.c ****   EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 214:Core/Src/ethernetif.c ****   EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 215:Core/Src/ethernetif.c ****   EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 216:Core/Src/ethernetif.c ****   EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 217:Core/Src/ethernetif.c ****   EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 218:Core/Src/ethernetif.c ****   
 219:Core/Src/ethernetif.c ****   /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
 220:Core/Src/ethernetif.c ****   if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 221:Core/Src/ethernetif.c ****   {
 222:Core/Src/ethernetif.c ****     /* Set netif link flag */
 223:Core/Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_LINK_UP;
 224:Core/Src/ethernetif.c ****   }
 225:Core/Src/ethernetif.c ****   
 226:Core/Src/ethernetif.c ****   /* Initialize Tx Descriptors list: Chain Mode */
 227:Core/Src/ethernetif.c ****   HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 228:Core/Src/ethernetif.c ****      
 229:Core/Src/ethernetif.c ****   /* Initialize Rx Descriptors list: Chain Mode  */
 230:Core/Src/ethernetif.c ****   HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 231:Core/Src/ethernetif.c ****   
 232:Core/Src/ethernetif.c ****   /* set netif MAC hardware address length */
 233:Core/Src/ethernetif.c ****   netif->hwaddr_len = ETH_HWADDR_LEN;
 234:Core/Src/ethernetif.c **** 
 235:Core/Src/ethernetif.c ****   /* set netif MAC hardware address */
 236:Core/Src/ethernetif.c ****   netif->hwaddr[0] =  MAC_ADDR0;
 237:Core/Src/ethernetif.c ****   netif->hwaddr[1] =  MAC_ADDR1;
 238:Core/Src/ethernetif.c ****   netif->hwaddr[2] =  MAC_ADDR2;
 239:Core/Src/ethernetif.c ****   netif->hwaddr[3] =  MAC_ADDR3;
 240:Core/Src/ethernetif.c ****   netif->hwaddr[4] =  MAC_ADDR4;
 241:Core/Src/ethernetif.c ****   netif->hwaddr[5] =  MAC_ADDR5;
 242:Core/Src/ethernetif.c **** 
 243:Core/Src/ethernetif.c ****   /* set netif maximum transfer unit */
 244:Core/Src/ethernetif.c ****   netif->mtu = 1500;
 245:Core/Src/ethernetif.c **** 
 246:Core/Src/ethernetif.c ****   /* Accept broadcast address and ARP traffic */
 247:Core/Src/ethernetif.c ****   netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 248:Core/Src/ethernetif.c **** 
 249:Core/Src/ethernetif.c ****   /* create a binary semaphore used for informing ethernetif of frame reception */
 250:Core/Src/ethernetif.c ****   osSemaphoreDef(SEM);
 251:Core/Src/ethernetif.c ****   s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 252:Core/Src/ethernetif.c **** 
 253:Core/Src/ethernetif.c ****   /* create the task that handles the ETH_MAC */
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 6


 254:Core/Src/ethernetif.c ****   osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 255:Core/Src/ethernetif.c ****   osThreadCreate (osThread(EthIf), netif);
 256:Core/Src/ethernetif.c **** 
 257:Core/Src/ethernetif.c ****   /* Enable MAC and DMA transmission and reception */
 258:Core/Src/ethernetif.c ****   HAL_ETH_Start(&EthHandle);
 259:Core/Src/ethernetif.c **** }
 260:Core/Src/ethernetif.c **** 
 261:Core/Src/ethernetif.c **** 
 262:Core/Src/ethernetif.c **** /**
 263:Core/Src/ethernetif.c ****   * @brief This function should do the actual transmission of the packet. The packet is
 264:Core/Src/ethernetif.c ****   * contained in the pbuf that is passed to the function. This pbuf
 265:Core/Src/ethernetif.c ****   * might be chained.
 266:Core/Src/ethernetif.c ****   *
 267:Core/Src/ethernetif.c ****   * @param netif the lwip network interface structure for this ethernetif
 268:Core/Src/ethernetif.c ****   * @param p the MAC packet to send (e.g. IP packet including MAC addresses and type)
 269:Core/Src/ethernetif.c ****   * @return ERR_OK if the packet could be sent
 270:Core/Src/ethernetif.c ****   *         an err_t value if the packet couldn't be sent
 271:Core/Src/ethernetif.c ****   *
 272:Core/Src/ethernetif.c ****   * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 273:Core/Src/ethernetif.c ****   *       strange results. You might consider waiting for space in the DMA queue
 274:Core/Src/ethernetif.c ****   *       to become available since the stack doesn't retry to send a packet
 275:Core/Src/ethernetif.c ****   *       dropped because of memory failure (except for the TCP timers).
 276:Core/Src/ethernetif.c ****   */
 277:Core/Src/ethernetif.c **** static err_t low_level_output(struct netif *netif, struct pbuf *p)
 278:Core/Src/ethernetif.c **** {
  33              		.loc 1 278 1 view -0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              		.loc 1 278 1 is_stmt 0 view .LVU1
  38 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 40
  41              		.cfi_offset 3, -40
  42              		.cfi_offset 4, -36
  43              		.cfi_offset 5, -32
  44              		.cfi_offset 6, -28
  45              		.cfi_offset 7, -24
  46              		.cfi_offset 8, -20
  47              		.cfi_offset 9, -16
  48              		.cfi_offset 10, -12
  49              		.cfi_offset 11, -8
  50              		.cfi_offset 14, -4
  51 0004 8B46     		mov	fp, r1
 279:Core/Src/ethernetif.c ****   err_t errval;
  52              		.loc 1 279 3 is_stmt 1 view .LVU2
 280:Core/Src/ethernetif.c ****   struct pbuf *q;
  53              		.loc 1 280 3 view .LVU3
 281:Core/Src/ethernetif.c ****   uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
  54              		.loc 1 281 3 view .LVU4
  55              		.loc 1 281 42 is_stmt 0 view .LVU5
  56 0006 2C4B     		ldr	r3, .L13
  57 0008 DE6A     		ldr	r6, [r3, #44]
  58              		.loc 1 281 49 view .LVU6
  59 000a D6F808A0 		ldr	r10, [r6, #8]
  60              	.LVL1:
 282:Core/Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 7


  61              		.loc 1 282 3 is_stmt 1 view .LVU7
 283:Core/Src/ethernetif.c ****   uint32_t framelength = 0;
  62              		.loc 1 283 3 view .LVU8
 284:Core/Src/ethernetif.c ****   uint32_t bufferoffset = 0;
  63              		.loc 1 284 3 view .LVU9
 285:Core/Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
  64              		.loc 1 285 3 view .LVU10
 286:Core/Src/ethernetif.c ****   uint32_t payloadoffset = 0;
  65              		.loc 1 286 3 view .LVU11
 287:Core/Src/ethernetif.c **** 
 288:Core/Src/ethernetif.c ****   DmaTxDesc = EthHandle.TxDesc;
  66              		.loc 1 288 3 view .LVU12
 289:Core/Src/ethernetif.c ****   bufferoffset = 0;
  67              		.loc 1 289 3 view .LVU13
 290:Core/Src/ethernetif.c ****   
 291:Core/Src/ethernetif.c ****   /* copy frame from pbufs to driver buffers */
 292:Core/Src/ethernetif.c ****   for(q = p; q != NULL; q = q->next)
  68              		.loc 1 292 3 view .LVU14
 289:Core/Src/ethernetif.c ****   bufferoffset = 0;
  69              		.loc 1 289 16 is_stmt 0 view .LVU15
  70 000e 0024     		movs	r4, #0
 283:Core/Src/ethernetif.c ****   uint32_t bufferoffset = 0;
  71              		.loc 1 283 12 view .LVU16
  72 0010 2746     		mov	r7, r4
  73              	.LVL2:
  74              	.L2:
  75              		.loc 1 292 14 is_stmt 1 discriminator 1 view .LVU17
  76              		.loc 1 292 3 is_stmt 0 discriminator 1 view .LVU18
  77 0012 BBF1000F 		cmp	fp, #0
  78 0016 32D0     		beq	.L11
 293:Core/Src/ethernetif.c ****   {
 294:Core/Src/ethernetif.c ****     /* Is this buffer available? If not, goto error */
 295:Core/Src/ethernetif.c ****     if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
  79              		.loc 1 295 5 is_stmt 1 view .LVU19
  80              		.loc 1 295 18 is_stmt 0 view .LVU20
  81 0018 3368     		ldr	r3, [r6]
  82              		.loc 1 295 7 view .LVU21
  83 001a 002B     		cmp	r3, #0
  84 001c 35DB     		blt	.L8
 296:Core/Src/ethernetif.c ****     {
 297:Core/Src/ethernetif.c ****       errval = ERR_USE;
 298:Core/Src/ethernetif.c ****       goto error;
 299:Core/Src/ethernetif.c ****     }
 300:Core/Src/ethernetif.c ****     
 301:Core/Src/ethernetif.c ****     /* Get bytes in current lwIP buffer */
 302:Core/Src/ethernetif.c ****     byteslefttocopy = q->len;
  85              		.loc 1 302 5 is_stmt 1 view .LVU22
  86              		.loc 1 302 24 is_stmt 0 view .LVU23
  87 001e BBF80A90 		ldrh	r9, [fp, #10]
  88              	.LVL3:
 303:Core/Src/ethernetif.c ****     payloadoffset = 0;
  89              		.loc 1 303 5 is_stmt 1 view .LVU24
 304:Core/Src/ethernetif.c ****     
 305:Core/Src/ethernetif.c ****     /* Check if the length of data to copy is bigger than Tx buffer size*/
 306:Core/Src/ethernetif.c ****     while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
  90              		.loc 1 306 5 view .LVU25
 303:Core/Src/ethernetif.c ****     payloadoffset = 0;
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 8


  91              		.loc 1 303 19 is_stmt 0 view .LVU26
  92 0022 0025     		movs	r5, #0
  93              	.LVL4:
  94              	.L4:
  95              		.loc 1 306 10 is_stmt 1 view .LVU27
  96              		.loc 1 306 29 is_stmt 0 view .LVU28
  97 0024 04EB0908 		add	r8, r4, r9
  98              		.loc 1 306 10 view .LVU29
  99 0028 40F2F453 		movw	r3, #1524
 100 002c 9845     		cmp	r8, r3
 101 002e 19D9     		bls	.L12
 307:Core/Src/ethernetif.c ****     {
 308:Core/Src/ethernetif.c ****       /* Copy data to Tx buffer*/
 309:Core/Src/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloa
 102              		.loc 1 309 7 is_stmt 1 view .LVU30
 103              		.loc 1 309 82 is_stmt 0 view .LVU31
 104 0030 DBF80410 		ldr	r1, [fp, #4]
 105              		.loc 1 309 7 view .LVU32
 106 0034 40F2F452 		movw	r2, #1524
 107 0038 121B     		subs	r2, r2, r4
 108 003a 2944     		add	r1, r1, r5
 109 003c 0AEB0400 		add	r0, r10, r4
 110 0040 FFF7FEFF 		bl	memcpy
 111              	.LVL5:
 310:Core/Src/ethernetif.c ****       
 311:Core/Src/ethernetif.c ****       /* Point to next descriptor */
 312:Core/Src/ethernetif.c ****       DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 112              		.loc 1 312 7 is_stmt 1 view .LVU33
 113              		.loc 1 312 51 is_stmt 0 view .LVU34
 114 0044 F668     		ldr	r6, [r6, #12]
 115              	.LVL6:
 313:Core/Src/ethernetif.c ****       
 314:Core/Src/ethernetif.c ****       /* Check if the buffer is available */
 315:Core/Src/ethernetif.c ****       if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 116              		.loc 1 315 7 is_stmt 1 view .LVU35
 117              		.loc 1 315 20 is_stmt 0 view .LVU36
 118 0046 3368     		ldr	r3, [r6]
 119              		.loc 1 315 9 view .LVU37
 120 0048 002B     		cmp	r3, #0
 121 004a 21DB     		blt	.L9
 316:Core/Src/ethernetif.c ****       {
 317:Core/Src/ethernetif.c ****         errval = ERR_USE;
 318:Core/Src/ethernetif.c ****         goto error;
 319:Core/Src/ethernetif.c ****       }
 320:Core/Src/ethernetif.c ****       
 321:Core/Src/ethernetif.c ****       buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 122              		.loc 1 321 7 is_stmt 1 view .LVU38
 123              		.loc 1 321 37 is_stmt 0 view .LVU39
 124 004c D6F808A0 		ldr	r10, [r6, #8]
 125              	.LVL7:
 322:Core/Src/ethernetif.c ****       
 323:Core/Src/ethernetif.c ****       byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 126              		.loc 1 323 7 is_stmt 1 view .LVU40
 127              		.loc 1 323 23 is_stmt 0 view .LVU41
 128 0050 A8F2F459 		subw	r9, r8, #1524
 129              	.LVL8:
 324:Core/Src/ethernetif.c ****       payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 9


 130              		.loc 1 324 7 is_stmt 1 view .LVU42
 131              		.loc 1 324 37 is_stmt 0 view .LVU43
 132 0054 2D1B     		subs	r5, r5, r4
 133              	.LVL9:
 134              		.loc 1 324 21 view .LVU44
 135 0056 05F2F455 		addw	r5, r5, #1524
 136              	.LVL10:
 325:Core/Src/ethernetif.c ****       framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 137              		.loc 1 325 7 is_stmt 1 view .LVU45
 138              		.loc 1 325 33 is_stmt 0 view .LVU46
 139 005a 3F1B     		subs	r7, r7, r4
 140              	.LVL11:
 141              		.loc 1 325 19 view .LVU47
 142 005c 07F2F457 		addw	r7, r7, #1524
 143              	.LVL12:
 326:Core/Src/ethernetif.c ****       bufferoffset = 0;
 144              		.loc 1 326 7 is_stmt 1 view .LVU48
 145              		.loc 1 326 20 is_stmt 0 view .LVU49
 146 0060 0024     		movs	r4, #0
 147 0062 DFE7     		b	.L4
 148              	.LVL13:
 149              	.L12:
 327:Core/Src/ethernetif.c ****     }
 328:Core/Src/ethernetif.c ****     
 329:Core/Src/ethernetif.c ****     /* Copy the remaining bytes */
 330:Core/Src/ethernetif.c ****     memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloado
 150              		.loc 1 330 5 is_stmt 1 discriminator 2 view .LVU50
 151              		.loc 1 330 80 is_stmt 0 discriminator 2 view .LVU51
 152 0064 DBF80410 		ldr	r1, [fp, #4]
 153              		.loc 1 330 5 discriminator 2 view .LVU52
 154 0068 4A46     		mov	r2, r9
 155 006a 2944     		add	r1, r1, r5
 156 006c 0AEB0400 		add	r0, r10, r4
 157 0070 FFF7FEFF 		bl	memcpy
 158              	.LVL14:
 331:Core/Src/ethernetif.c ****     bufferoffset = bufferoffset + byteslefttocopy;
 159              		.loc 1 331 5 is_stmt 1 discriminator 2 view .LVU53
 332:Core/Src/ethernetif.c ****     framelength = framelength + byteslefttocopy;
 160              		.loc 1 332 5 discriminator 2 view .LVU54
 161              		.loc 1 332 17 is_stmt 0 discriminator 2 view .LVU55
 162 0074 4F44     		add	r7, r7, r9
 163              	.LVL15:
 292:Core/Src/ethernetif.c ****   {
 164              		.loc 1 292 25 is_stmt 1 discriminator 2 view .LVU56
 292:Core/Src/ethernetif.c ****   {
 165              		.loc 1 292 27 is_stmt 0 discriminator 2 view .LVU57
 166 0076 DBF800B0 		ldr	fp, [fp]
 167              	.LVL16:
 331:Core/Src/ethernetif.c ****     bufferoffset = bufferoffset + byteslefttocopy;
 168              		.loc 1 331 18 discriminator 2 view .LVU58
 169 007a 4446     		mov	r4, r8
 170 007c C9E7     		b	.L2
 171              	.LVL17:
 172              	.L11:
 333:Core/Src/ethernetif.c ****   }
 334:Core/Src/ethernetif.c ****   
 335:Core/Src/ethernetif.c ****   /* Prepare transmit descriptors to give to DMA */ 
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 10


 336:Core/Src/ethernetif.c ****   HAL_ETH_TransmitFrame(&EthHandle, framelength);
 173              		.loc 1 336 3 is_stmt 1 view .LVU59
 174 007e 3946     		mov	r1, r7
 175 0080 0D48     		ldr	r0, .L13
 176 0082 FFF7FEFF 		bl	HAL_ETH_TransmitFrame
 177              	.LVL18:
 337:Core/Src/ethernetif.c ****   
 338:Core/Src/ethernetif.c ****   errval = ERR_OK;
 178              		.loc 1 338 3 view .LVU60
 179              		.loc 1 338 10 is_stmt 0 view .LVU61
 180 0086 0020     		movs	r0, #0
 181 0088 04E0     		b	.L3
 182              	.LVL19:
 183              	.L8:
 297:Core/Src/ethernetif.c ****       goto error;
 184              		.loc 1 297 14 view .LVU62
 185 008a 6FF00700 		mvn	r0, #7
 186 008e 01E0     		b	.L3
 187              	.LVL20:
 188              	.L9:
 317:Core/Src/ethernetif.c ****         goto error;
 189              		.loc 1 317 16 view .LVU63
 190 0090 6FF00700 		mvn	r0, #7
 191              	.LVL21:
 192              	.L3:
 339:Core/Src/ethernetif.c ****   
 340:Core/Src/ethernetif.c **** error:
 341:Core/Src/ethernetif.c ****   
 342:Core/Src/ethernetif.c ****   /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume trans
 343:Core/Src/ethernetif.c ****   if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 193              		.loc 1 343 3 is_stmt 1 view .LVU64
 194              		.loc 1 343 17 is_stmt 0 view .LVU65
 195 0094 084B     		ldr	r3, .L13
 196 0096 1B68     		ldr	r3, [r3]
 197              		.loc 1 343 26 view .LVU66
 198 0098 41F21402 		movw	r2, #4116
 199 009c 9A58     		ldr	r2, [r3, r2]
 200              		.loc 1 343 6 view .LVU67
 201 009e 12F0200F 		tst	r2, #32
 202 00a2 07D0     		beq	.L7
 344:Core/Src/ethernetif.c ****   {
 345:Core/Src/ethernetif.c ****     /* Clear TUS ETHERNET DMA flag */
 346:Core/Src/ethernetif.c ****     EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 203              		.loc 1 346 5 is_stmt 1 view .LVU68
 204              		.loc 1 346 31 is_stmt 0 view .LVU69
 205 00a4 41F21402 		movw	r2, #4116
 206 00a8 2021     		movs	r1, #32
 207 00aa 9950     		str	r1, [r3, r2]
 347:Core/Src/ethernetif.c ****     
 348:Core/Src/ethernetif.c ****     /* Resume DMA transmission*/
 349:Core/Src/ethernetif.c ****     EthHandle.Instance->DMATPDR = 0;
 208              		.loc 1 349 5 is_stmt 1 view .LVU70
 209              		.loc 1 349 33 is_stmt 0 view .LVU71
 210 00ac 41F20402 		movw	r2, #4100
 211 00b0 0021     		movs	r1, #0
 212 00b2 9950     		str	r1, [r3, r2]
 213              	.L7:
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 11


 350:Core/Src/ethernetif.c ****   }
 351:Core/Src/ethernetif.c ****   return errval;
 214              		.loc 1 351 3 is_stmt 1 view .LVU72
 352:Core/Src/ethernetif.c **** }
 215              		.loc 1 352 1 is_stmt 0 view .LVU73
 216 00b4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 217              	.LVL22:
 218              	.L14:
 219              		.loc 1 352 1 view .LVU74
 220              		.align	2
 221              	.L13:
 222 00b8 00000000 		.word	EthHandle
 223              		.cfi_endproc
 224              	.LFE174:
 226              		.section	.text.low_level_init,"ax",%progbits
 227              		.align	1
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu fpv5-sp-d16
 233              	low_level_init:
 234              	.LVL23:
 235              	.LFB173:
 206:Core/Src/ethernetif.c ****   uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 236              		.loc 1 206 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 32
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 206:Core/Src/ethernetif.c ****   uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 240              		.loc 1 206 1 is_stmt 0 view .LVU76
 241 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 242              	.LCFI1:
 243              		.cfi_def_cfa_offset 20
 244              		.cfi_offset 4, -20
 245              		.cfi_offset 5, -16
 246              		.cfi_offset 6, -12
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 89B0     		sub	sp, sp, #36
 250              	.LCFI2:
 251              		.cfi_def_cfa_offset 56
 252 0004 0446     		mov	r4, r0
 207:Core/Src/ethernetif.c ****   
 253              		.loc 1 207 3 is_stmt 1 view .LVU77
 207:Core/Src/ethernetif.c ****   
 254              		.loc 1 207 11 is_stmt 0 view .LVU78
 255 0006 304B     		ldr	r3, .L18
 256 0008 93E80300 		ldm	r3, {r0, r1}
 257              	.LVL24:
 207:Core/Src/ethernetif.c ****   
 258              		.loc 1 207 11 view .LVU79
 259 000c 0690     		str	r0, [sp, #24]
 260 000e ADF81C10 		strh	r1, [sp, #28]	@ movhi
 209:Core/Src/ethernetif.c ****   EthHandle.Init.MACAddr = macaddress;
 261              		.loc 1 209 3 is_stmt 1 view .LVU80
 209:Core/Src/ethernetif.c ****   EthHandle.Init.MACAddr = macaddress;
 262              		.loc 1 209 22 is_stmt 0 view .LVU81
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 12


 263 0012 2E48     		ldr	r0, .L18+4
 264 0014 2E4B     		ldr	r3, .L18+8
 265 0016 0360     		str	r3, [r0]
 210:Core/Src/ethernetif.c ****   EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 266              		.loc 1 210 3 is_stmt 1 view .LVU82
 210:Core/Src/ethernetif.c ****   EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 267              		.loc 1 210 26 is_stmt 0 view .LVU83
 268 0018 06AB     		add	r3, sp, #24
 269 001a 4361     		str	r3, [r0, #20]
 211:Core/Src/ethernetif.c ****   EthHandle.Init.Speed = ETH_SPEED_100M;
 270              		.loc 1 211 3 is_stmt 1 view .LVU84
 211:Core/Src/ethernetif.c ****   EthHandle.Init.Speed = ETH_SPEED_100M;
 271              		.loc 1 211 34 is_stmt 0 view .LVU85
 272 001c 0123     		movs	r3, #1
 273 001e 4360     		str	r3, [r0, #4]
 212:Core/Src/ethernetif.c ****   EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 274              		.loc 1 212 3 is_stmt 1 view .LVU86
 212:Core/Src/ethernetif.c ****   EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 275              		.loc 1 212 24 is_stmt 0 view .LVU87
 276 0020 4FF48042 		mov	r2, #16384
 277 0024 8260     		str	r2, [r0, #8]
 213:Core/Src/ethernetif.c ****   EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 278              		.loc 1 213 3 is_stmt 1 view .LVU88
 213:Core/Src/ethernetif.c ****   EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 279              		.loc 1 213 29 is_stmt 0 view .LVU89
 280 0026 4FF40062 		mov	r2, #2048
 281 002a C260     		str	r2, [r0, #12]
 214:Core/Src/ethernetif.c ****   EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 282              		.loc 1 214 3 is_stmt 1 view .LVU90
 214:Core/Src/ethernetif.c ****   EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 283              		.loc 1 214 33 is_stmt 0 view .LVU91
 284 002c 4FF40002 		mov	r2, #8388608
 285 0030 0262     		str	r2, [r0, #32]
 215:Core/Src/ethernetif.c ****   EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 286              		.loc 1 215 3 is_stmt 1 view .LVU92
 215:Core/Src/ethernetif.c ****   EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 287              		.loc 1 215 25 is_stmt 0 view .LVU93
 288 0032 8361     		str	r3, [r0, #24]
 216:Core/Src/ethernetif.c ****   EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 289              		.loc 1 216 3 is_stmt 1 view .LVU94
 216:Core/Src/ethernetif.c ****   EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 290              		.loc 1 216 31 is_stmt 0 view .LVU95
 291 0034 0023     		movs	r3, #0
 292 0036 C361     		str	r3, [r0, #28]
 217:Core/Src/ethernetif.c ****   
 293              		.loc 1 217 3 is_stmt 1 view .LVU96
 217:Core/Src/ethernetif.c ****   
 294              		.loc 1 217 29 is_stmt 0 view .LVU97
 295 0038 0382     		strh	r3, [r0, #16]	@ movhi
 220:Core/Src/ethernetif.c ****   {
 296              		.loc 1 220 3 is_stmt 1 view .LVU98
 220:Core/Src/ethernetif.c ****   {
 297              		.loc 1 220 7 is_stmt 0 view .LVU99
 298 003a FFF7FEFF 		bl	HAL_ETH_Init
 299              	.LVL25:
 220:Core/Src/ethernetif.c ****   {
 300              		.loc 1 220 6 view .LVU100
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 13


 301 003e 28B9     		cbnz	r0, .L16
 223:Core/Src/ethernetif.c ****   }
 302              		.loc 1 223 5 is_stmt 1 view .LVU101
 223:Core/Src/ethernetif.c ****   }
 303              		.loc 1 223 18 is_stmt 0 view .LVU102
 304 0040 94F83130 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 305 0044 43F00403 		orr	r3, r3, #4
 306 0048 84F83130 		strb	r3, [r4, #49]
 307              	.L16:
 227:Core/Src/ethernetif.c ****      
 308              		.loc 1 227 3 is_stmt 1 view .LVU103
 309 004c 1F4F     		ldr	r7, .L18+4
 310 004e 0423     		movs	r3, #4
 311 0050 204A     		ldr	r2, .L18+12
 312 0052 2149     		ldr	r1, .L18+16
 313 0054 3846     		mov	r0, r7
 314 0056 FFF7FEFF 		bl	HAL_ETH_DMATxDescListInit
 315              	.LVL26:
 230:Core/Src/ethernetif.c ****   
 316              		.loc 1 230 3 view .LVU104
 317 005a 0423     		movs	r3, #4
 318 005c 1F4A     		ldr	r2, .L18+20
 319 005e 2049     		ldr	r1, .L18+24
 320 0060 3846     		mov	r0, r7
 321 0062 FFF7FEFF 		bl	HAL_ETH_DMARxDescListInit
 322              	.LVL27:
 233:Core/Src/ethernetif.c **** 
 323              		.loc 1 233 3 view .LVU105
 233:Core/Src/ethernetif.c **** 
 324              		.loc 1 233 21 is_stmt 0 view .LVU106
 325 0066 0623     		movs	r3, #6
 326 0068 84F83030 		strb	r3, [r4, #48]
 236:Core/Src/ethernetif.c ****   netif->hwaddr[1] =  MAC_ADDR1;
 327              		.loc 1 236 3 is_stmt 1 view .LVU107
 236:Core/Src/ethernetif.c ****   netif->hwaddr[1] =  MAC_ADDR1;
 328              		.loc 1 236 20 is_stmt 0 view .LVU108
 329 006c 0223     		movs	r3, #2
 330 006e 84F82A30 		strb	r3, [r4, #42]
 237:Core/Src/ethernetif.c ****   netif->hwaddr[2] =  MAC_ADDR2;
 331              		.loc 1 237 3 is_stmt 1 view .LVU109
 237:Core/Src/ethernetif.c ****   netif->hwaddr[2] =  MAC_ADDR2;
 332              		.loc 1 237 20 is_stmt 0 view .LVU110
 333 0072 0023     		movs	r3, #0
 334 0074 84F82B30 		strb	r3, [r4, #43]
 238:Core/Src/ethernetif.c ****   netif->hwaddr[3] =  MAC_ADDR3;
 335              		.loc 1 238 3 is_stmt 1 view .LVU111
 238:Core/Src/ethernetif.c ****   netif->hwaddr[3] =  MAC_ADDR3;
 336              		.loc 1 238 20 is_stmt 0 view .LVU112
 337 0078 84F82C30 		strb	r3, [r4, #44]
 239:Core/Src/ethernetif.c ****   netif->hwaddr[4] =  MAC_ADDR4;
 338              		.loc 1 239 3 is_stmt 1 view .LVU113
 239:Core/Src/ethernetif.c ****   netif->hwaddr[4] =  MAC_ADDR4;
 339              		.loc 1 239 20 is_stmt 0 view .LVU114
 340 007c 84F82D30 		strb	r3, [r4, #45]
 240:Core/Src/ethernetif.c ****   netif->hwaddr[5] =  MAC_ADDR5;
 341              		.loc 1 240 3 is_stmt 1 view .LVU115
 240:Core/Src/ethernetif.c ****   netif->hwaddr[5] =  MAC_ADDR5;
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 14


 342              		.loc 1 240 20 is_stmt 0 view .LVU116
 343 0080 84F82E30 		strb	r3, [r4, #46]
 241:Core/Src/ethernetif.c **** 
 344              		.loc 1 241 3 is_stmt 1 view .LVU117
 241:Core/Src/ethernetif.c **** 
 345              		.loc 1 241 20 is_stmt 0 view .LVU118
 346 0084 84F82F30 		strb	r3, [r4, #47]
 244:Core/Src/ethernetif.c **** 
 347              		.loc 1 244 3 is_stmt 1 view .LVU119
 244:Core/Src/ethernetif.c **** 
 348              		.loc 1 244 14 is_stmt 0 view .LVU120
 349 0088 40F2DC52 		movw	r2, #1500
 350 008c 2285     		strh	r2, [r4, #40]	@ movhi
 247:Core/Src/ethernetif.c **** 
 351              		.loc 1 247 3 is_stmt 1 view .LVU121
 247:Core/Src/ethernetif.c **** 
 352              		.loc 1 247 16 is_stmt 0 view .LVU122
 353 008e 94F83120 		ldrb	r2, [r4, #49]	@ zero_extendqisi2
 354 0092 42F00A02 		orr	r2, r2, #10
 355 0096 84F83120 		strb	r2, [r4, #49]
 250:Core/Src/ethernetif.c ****   s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 356              		.loc 1 250 3 is_stmt 1 view .LVU123
 357 009a 0593     		str	r3, [sp, #20]
 251:Core/Src/ethernetif.c **** 
 358              		.loc 1 251 3 view .LVU124
 251:Core/Src/ethernetif.c **** 
 359              		.loc 1 251 18 is_stmt 0 view .LVU125
 360 009c 0121     		movs	r1, #1
 361 009e 05A8     		add	r0, sp, #20
 362 00a0 FFF7FEFF 		bl	osSemaphoreCreate
 363              	.LVL28:
 251:Core/Src/ethernetif.c **** 
 364              		.loc 1 251 16 view .LVU126
 365 00a4 0F4B     		ldr	r3, .L18+28
 366 00a6 1860     		str	r0, [r3]
 254:Core/Src/ethernetif.c ****   osThreadCreate (osThread(EthIf), netif);
 367              		.loc 1 254 3 is_stmt 1 view .LVU127
 368 00a8 6D46     		mov	r5, sp
 369 00aa 0F4E     		ldr	r6, .L18+32
 370 00ac 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 371 00ae 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 372 00b0 3368     		ldr	r3, [r6]
 373 00b2 2B60     		str	r3, [r5]
 255:Core/Src/ethernetif.c **** 
 374              		.loc 1 255 3 view .LVU128
 375 00b4 2146     		mov	r1, r4
 376 00b6 6846     		mov	r0, sp
 377 00b8 FFF7FEFF 		bl	osThreadCreate
 378              	.LVL29:
 258:Core/Src/ethernetif.c **** }
 379              		.loc 1 258 3 view .LVU129
 380 00bc 3846     		mov	r0, r7
 381 00be FFF7FEFF 		bl	HAL_ETH_Start
 382              	.LVL30:
 259:Core/Src/ethernetif.c **** 
 383              		.loc 1 259 1 is_stmt 0 view .LVU130
 384 00c2 09B0     		add	sp, sp, #36
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 15


 385              	.LCFI3:
 386              		.cfi_def_cfa_offset 20
 387              		@ sp needed
 388 00c4 F0BD     		pop	{r4, r5, r6, r7, pc}
 389              	.LVL31:
 390              	.L19:
 259:Core/Src/ethernetif.c **** 
 391              		.loc 1 259 1 view .LVU131
 392 00c6 00BF     		.align	2
 393              	.L18:
 394 00c8 00000000 		.word	.LANCHOR0
 395 00cc 00000000 		.word	EthHandle
 396 00d0 00800240 		.word	1073905664
 397 00d4 00000000 		.word	Tx_Buff
 398 00d8 00000000 		.word	.LANCHOR1
 399 00dc 00000000 		.word	Rx_Buff
 400 00e0 00000000 		.word	.LANCHOR2
 401 00e4 00000000 		.word	.LANCHOR3
 402 00e8 08000000 		.word	.LANCHOR0+8
 403              		.cfi_endproc
 404              	.LFE173:
 406              		.section	.text.low_level_input,"ax",%progbits
 407              		.align	1
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv5-sp-d16
 413              	low_level_input:
 414              	.LVL32:
 415              	.LFB175:
 353:Core/Src/ethernetif.c **** 
 354:Core/Src/ethernetif.c **** /**
 355:Core/Src/ethernetif.c ****   * @brief Should allocate a pbuf and transfer the bytes of the incoming
 356:Core/Src/ethernetif.c ****   * packet from the interface into the pbuf.
 357:Core/Src/ethernetif.c ****   *
 358:Core/Src/ethernetif.c ****   * @param netif the lwip network interface structure for this ethernetif
 359:Core/Src/ethernetif.c ****   * @return a pbuf filled with the received packet (including MAC header)
 360:Core/Src/ethernetif.c ****   *         NULL on memory error
 361:Core/Src/ethernetif.c ****   */
 362:Core/Src/ethernetif.c **** static struct pbuf * low_level_input(struct netif *netif)
 363:Core/Src/ethernetif.c **** {
 416              		.loc 1 363 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		.loc 1 363 1 is_stmt 0 view .LVU133
 421 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 422              	.LCFI4:
 423              		.cfi_def_cfa_offset 32
 424              		.cfi_offset 4, -32
 425              		.cfi_offset 5, -28
 426              		.cfi_offset 6, -24
 427              		.cfi_offset 7, -20
 428              		.cfi_offset 8, -16
 429              		.cfi_offset 9, -12
 430              		.cfi_offset 10, -8
 431              		.cfi_offset 14, -4
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 16


 364:Core/Src/ethernetif.c ****   struct pbuf *p = NULL, *q = NULL;
 432              		.loc 1 364 3 is_stmt 1 view .LVU134
 433              	.LVL33:
 365:Core/Src/ethernetif.c ****   uint16_t len = 0;
 434              		.loc 1 365 3 view .LVU135
 366:Core/Src/ethernetif.c ****   uint8_t *buffer;
 435              		.loc 1 366 3 view .LVU136
 367:Core/Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *dmarxdesc;
 436              		.loc 1 367 3 view .LVU137
 368:Core/Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 437              		.loc 1 368 3 view .LVU138
 369:Core/Src/ethernetif.c ****   uint32_t payloadoffset = 0;
 438              		.loc 1 369 3 view .LVU139
 370:Core/Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 439              		.loc 1 370 3 view .LVU140
 371:Core/Src/ethernetif.c ****   uint32_t i=0;
 440              		.loc 1 371 3 view .LVU141
 372:Core/Src/ethernetif.c ****   
 373:Core/Src/ethernetif.c ****   /* get received frame */
 374:Core/Src/ethernetif.c ****   if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 441              		.loc 1 374 3 view .LVU142
 442              		.loc 1 374 6 is_stmt 0 view .LVU143
 443 0004 3348     		ldr	r0, .L34
 444              	.LVL34:
 445              		.loc 1 374 6 view .LVU144
 446 0006 FFF7FEFF 		bl	HAL_ETH_GetReceivedFrame_IT
 447              	.LVL35:
 448              		.loc 1 374 5 view .LVU145
 449 000a 0028     		cmp	r0, #0
 450 000c 5ED1     		bne	.L29
 375:Core/Src/ethernetif.c ****     return NULL;
 376:Core/Src/ethernetif.c ****   
 377:Core/Src/ethernetif.c ****   /* Obtain the size of the packet and put it into the "len" variable. */
 378:Core/Src/ethernetif.c ****   len = EthHandle.RxFrameInfos.length;
 451              		.loc 1 378 3 is_stmt 1 view .LVU146
 452              		.loc 1 378 31 is_stmt 0 view .LVU147
 453 000e 314B     		ldr	r3, .L34
 454              		.loc 1 378 7 view .LVU148
 455 0010 998F     		ldrh	r1, [r3, #60]
 456              	.LVL36:
 379:Core/Src/ethernetif.c ****   buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 457              		.loc 1 379 3 is_stmt 1 view .LVU149
 458              		.loc 1 379 45 is_stmt 0 view .LVU150
 459 0012 D3F84080 		ldr	r8, [r3, #64]
 460              	.LVL37:
 380:Core/Src/ethernetif.c ****   
 381:Core/Src/ethernetif.c ****   if (len > 0)
 461              		.loc 1 381 3 is_stmt 1 view .LVU151
 462              		.loc 1 381 6 is_stmt 0 view .LVU152
 463 0016 79B9     		cbnz	r1, .L32
 364:Core/Src/ethernetif.c ****   uint16_t len = 0;
 464              		.loc 1 364 16 view .LVU153
 465 0018 4FF0000A 		mov	r10, #0
 466              	.LVL38:
 467              	.L22:
 382:Core/Src/ethernetif.c ****   {
 383:Core/Src/ethernetif.c ****     /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 17


 384:Core/Src/ethernetif.c ****     p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 385:Core/Src/ethernetif.c ****   }
 386:Core/Src/ethernetif.c ****   
 387:Core/Src/ethernetif.c ****   if (p != NULL)
 388:Core/Src/ethernetif.c ****   {
 389:Core/Src/ethernetif.c ****     dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 390:Core/Src/ethernetif.c ****     bufferoffset = 0;
 391:Core/Src/ethernetif.c ****     
 392:Core/Src/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
 393:Core/Src/ethernetif.c ****     {
 394:Core/Src/ethernetif.c ****       byteslefttocopy = q->len;
 395:Core/Src/ethernetif.c ****       payloadoffset = 0;
 396:Core/Src/ethernetif.c ****       
 397:Core/Src/ethernetif.c ****       /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
 398:Core/Src/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 399:Core/Src/ethernetif.c ****       {
 400:Core/Src/ethernetif.c ****         /* Copy data to pbuf */
 401:Core/Src/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buf
 402:Core/Src/ethernetif.c ****         
 403:Core/Src/ethernetif.c ****         /* Point to next descriptor */
 404:Core/Src/ethernetif.c ****         dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 405:Core/Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 406:Core/Src/ethernetif.c ****         
 407:Core/Src/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 408:Core/Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 409:Core/Src/ethernetif.c ****         bufferoffset = 0;
 410:Core/Src/ethernetif.c ****       }
 411:Core/Src/ethernetif.c ****       
 412:Core/Src/ethernetif.c ****       /* Copy remaining data in pbuf */
 413:Core/Src/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buffe
 414:Core/Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 415:Core/Src/ethernetif.c ****     }
 416:Core/Src/ethernetif.c ****   }
 417:Core/Src/ethernetif.c ****     
 418:Core/Src/ethernetif.c ****   /* Release descriptors to DMA */
 419:Core/Src/ethernetif.c ****   /* Point to first descriptor */
 420:Core/Src/ethernetif.c ****   dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 468              		.loc 1 420 3 is_stmt 1 view .LVU154
 469              		.loc 1 420 13 is_stmt 0 view .LVU155
 470 001c 2D4B     		ldr	r3, .L34
 471 001e 1B6B     		ldr	r3, [r3, #48]
 472              	.LVL39:
 421:Core/Src/ethernetif.c ****   /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
 422:Core/Src/ethernetif.c ****   for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 473              		.loc 1 422 3 is_stmt 1 view .LVU156
 474              		.loc 1 422 9 is_stmt 0 view .LVU157
 475 0020 0021     		movs	r1, #0
 476              	.LVL40:
 477              	.L27:
 478              		.loc 1 422 13 is_stmt 1 discriminator 1 view .LVU158
 479              		.loc 1 422 38 is_stmt 0 discriminator 1 view .LVU159
 480 0022 2C4A     		ldr	r2, .L34
 481 0024 926B     		ldr	r2, [r2, #56]
 482              		.loc 1 422 3 discriminator 1 view .LVU160
 483 0026 8A42     		cmp	r2, r1
 484 0028 3BD9     		bls	.L33
 423:Core/Src/ethernetif.c ****   {  
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 18


 424:Core/Src/ethernetif.c ****     dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 485              		.loc 1 424 5 is_stmt 1 discriminator 3 view .LVU161
 486              		.loc 1 424 23 is_stmt 0 discriminator 3 view .LVU162
 487 002a 1A68     		ldr	r2, [r3]
 488 002c 42F00042 		orr	r2, r2, #-2147483648
 489 0030 1A60     		str	r2, [r3]
 425:Core/Src/ethernetif.c ****     dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 490              		.loc 1 425 5 is_stmt 1 discriminator 3 view .LVU163
 491              		.loc 1 425 49 is_stmt 0 discriminator 3 view .LVU164
 492 0032 DB68     		ldr	r3, [r3, #12]
 493              	.LVL41:
 422:Core/Src/ethernetif.c ****   {  
 494              		.loc 1 422 49 is_stmt 1 discriminator 3 view .LVU165
 422:Core/Src/ethernetif.c ****   {  
 495              		.loc 1 422 50 is_stmt 0 discriminator 3 view .LVU166
 496 0034 0131     		adds	r1, r1, #1
 497              	.LVL42:
 422:Core/Src/ethernetif.c ****   {  
 498              		.loc 1 422 50 discriminator 3 view .LVU167
 499 0036 F4E7     		b	.L27
 500              	.LVL43:
 501              	.L32:
 384:Core/Src/ethernetif.c ****   }
 502              		.loc 1 384 5 is_stmt 1 view .LVU168
 384:Core/Src/ethernetif.c ****   }
 503              		.loc 1 384 9 is_stmt 0 view .LVU169
 504 0038 4FF4C172 		mov	r2, #386
 505 003c FFF7FEFF 		bl	pbuf_alloc
 506              	.LVL44:
 387:Core/Src/ethernetif.c ****   {
 507              		.loc 1 387 3 is_stmt 1 view .LVU170
 387:Core/Src/ethernetif.c ****   {
 508              		.loc 1 387 6 is_stmt 0 view .LVU171
 509 0040 8246     		mov	r10, r0
 510 0042 0028     		cmp	r0, #0
 511 0044 EAD0     		beq	.L22
 389:Core/Src/ethernetif.c ****     bufferoffset = 0;
 512              		.loc 1 389 5 is_stmt 1 view .LVU172
 389:Core/Src/ethernetif.c ****     bufferoffset = 0;
 513              		.loc 1 389 15 is_stmt 0 view .LVU173
 514 0046 234B     		ldr	r3, .L34
 515 0048 1F6B     		ldr	r7, [r3, #48]
 516              	.LVL45:
 390:Core/Src/ethernetif.c ****     
 517              		.loc 1 390 5 is_stmt 1 view .LVU174
 392:Core/Src/ethernetif.c ****     {
 518              		.loc 1 392 5 view .LVU175
 384:Core/Src/ethernetif.c ****   }
 519              		.loc 1 384 9 is_stmt 0 view .LVU176
 520 004a 8146     		mov	r9, r0
 390:Core/Src/ethernetif.c ****     
 521              		.loc 1 390 18 view .LVU177
 522 004c 0024     		movs	r4, #0
 392:Core/Src/ethernetif.c ****     {
 523              		.loc 1 392 5 view .LVU178
 524 004e 21E0     		b	.L23
 525              	.LVL46:
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 19


 526              	.L25:
 401:Core/Src/ethernetif.c ****         
 527              		.loc 1 401 9 is_stmt 1 view .LVU179
 401:Core/Src/ethernetif.c ****         
 528              		.loc 1 401 39 is_stmt 0 view .LVU180
 529 0050 D9F80400 		ldr	r0, [r9, #4]
 401:Core/Src/ethernetif.c ****         
 530              		.loc 1 401 9 view .LVU181
 531 0054 40F2F452 		movw	r2, #1524
 532              	.LVL47:
 401:Core/Src/ethernetif.c ****         
 533              		.loc 1 401 9 view .LVU182
 534 0058 121B     		subs	r2, r2, r4
 535 005a 08EB0401 		add	r1, r8, r4
 536 005e 3044     		add	r0, r0, r6
 537 0060 FFF7FEFF 		bl	memcpy
 538              	.LVL48:
 404:Core/Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 539              		.loc 1 404 9 is_stmt 1 view .LVU183
 404:Core/Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 540              		.loc 1 404 53 is_stmt 0 view .LVU184
 541 0064 FF68     		ldr	r7, [r7, #12]
 542              	.LVL49:
 405:Core/Src/ethernetif.c ****         
 543              		.loc 1 405 9 is_stmt 1 view .LVU185
 405:Core/Src/ethernetif.c ****         
 544              		.loc 1 405 39 is_stmt 0 view .LVU186
 545 0066 D7F80880 		ldr	r8, [r7, #8]
 546              	.LVL50:
 407:Core/Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 547              		.loc 1 407 9 is_stmt 1 view .LVU187
 407:Core/Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 548              		.loc 1 407 25 is_stmt 0 view .LVU188
 549 006a A5F2F452 		subw	r2, r5, #1524
 550              	.LVL51:
 408:Core/Src/ethernetif.c ****         bufferoffset = 0;
 551              		.loc 1 408 9 is_stmt 1 view .LVU189
 408:Core/Src/ethernetif.c ****         bufferoffset = 0;
 552              		.loc 1 408 39 is_stmt 0 view .LVU190
 553 006e 361B     		subs	r6, r6, r4
 554              	.LVL52:
 408:Core/Src/ethernetif.c ****         bufferoffset = 0;
 555              		.loc 1 408 23 view .LVU191
 556 0070 06F2F456 		addw	r6, r6, #1524
 557              	.LVL53:
 409:Core/Src/ethernetif.c ****       }
 558              		.loc 1 409 9 is_stmt 1 view .LVU192
 409:Core/Src/ethernetif.c ****       }
 559              		.loc 1 409 22 is_stmt 0 view .LVU193
 560 0074 0024     		movs	r4, #0
 561              	.LVL54:
 562              	.L24:
 398:Core/Src/ethernetif.c ****       {
 563              		.loc 1 398 12 is_stmt 1 view .LVU194
 398:Core/Src/ethernetif.c ****       {
 564              		.loc 1 398 31 is_stmt 0 view .LVU195
 565 0076 A518     		adds	r5, r4, r2
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 20


 398:Core/Src/ethernetif.c ****       {
 566              		.loc 1 398 12 view .LVU196
 567 0078 40F2F453 		movw	r3, #1524
 568 007c 9D42     		cmp	r5, r3
 569 007e E7D8     		bhi	.L25
 413:Core/Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 570              		.loc 1 413 7 is_stmt 1 discriminator 2 view .LVU197
 413:Core/Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 571              		.loc 1 413 37 is_stmt 0 discriminator 2 view .LVU198
 572 0080 D9F80400 		ldr	r0, [r9, #4]
 413:Core/Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 573              		.loc 1 413 7 discriminator 2 view .LVU199
 574 0084 08EB0401 		add	r1, r8, r4
 575 0088 3044     		add	r0, r0, r6
 576 008a FFF7FEFF 		bl	memcpy
 577              	.LVL55:
 414:Core/Src/ethernetif.c ****     }
 578              		.loc 1 414 7 is_stmt 1 discriminator 2 view .LVU200
 392:Core/Src/ethernetif.c ****     {
 579              		.loc 1 392 27 discriminator 2 view .LVU201
 392:Core/Src/ethernetif.c ****     {
 580              		.loc 1 392 29 is_stmt 0 discriminator 2 view .LVU202
 581 008e D9F80090 		ldr	r9, [r9]
 582              	.LVL56:
 414:Core/Src/ethernetif.c ****     }
 583              		.loc 1 414 20 discriminator 2 view .LVU203
 584 0092 2C46     		mov	r4, r5
 585              	.LVL57:
 586              	.L23:
 392:Core/Src/ethernetif.c ****     {
 587              		.loc 1 392 16 is_stmt 1 discriminator 1 view .LVU204
 392:Core/Src/ethernetif.c ****     {
 588              		.loc 1 392 5 is_stmt 0 discriminator 1 view .LVU205
 589 0094 B9F1000F 		cmp	r9, #0
 590 0098 C0D0     		beq	.L22
 394:Core/Src/ethernetif.c ****       payloadoffset = 0;
 591              		.loc 1 394 7 is_stmt 1 view .LVU206
 394:Core/Src/ethernetif.c ****       payloadoffset = 0;
 592              		.loc 1 394 26 is_stmt 0 view .LVU207
 593 009a B9F80A20 		ldrh	r2, [r9, #10]
 594              	.LVL58:
 395:Core/Src/ethernetif.c ****       
 595              		.loc 1 395 7 is_stmt 1 view .LVU208
 398:Core/Src/ethernetif.c ****       {
 596              		.loc 1 398 7 view .LVU209
 395:Core/Src/ethernetif.c ****       
 597              		.loc 1 395 21 is_stmt 0 view .LVU210
 598 009e 0026     		movs	r6, #0
 398:Core/Src/ethernetif.c ****       {
 599              		.loc 1 398 12 view .LVU211
 600 00a0 E9E7     		b	.L24
 601              	.LVL59:
 602              	.L33:
 426:Core/Src/ethernetif.c ****   }
 427:Core/Src/ethernetif.c ****     
 428:Core/Src/ethernetif.c ****   /* Clear Segment_Count */
 429:Core/Src/ethernetif.c ****   EthHandle.RxFrameInfos.SegCount =0;
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 21


 603              		.loc 1 429 3 is_stmt 1 view .LVU212
 604              		.loc 1 429 35 is_stmt 0 view .LVU213
 605 00a2 0C4B     		ldr	r3, .L34
 606              	.LVL60:
 607              		.loc 1 429 35 view .LVU214
 608 00a4 0022     		movs	r2, #0
 609 00a6 9A63     		str	r2, [r3, #56]
 430:Core/Src/ethernetif.c ****   
 431:Core/Src/ethernetif.c ****   /* When Rx Buffer unavailable flag is set: clear it and resume reception */
 432:Core/Src/ethernetif.c ****   if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 610              		.loc 1 432 3 is_stmt 1 view .LVU215
 611              		.loc 1 432 17 is_stmt 0 view .LVU216
 612 00a8 1B68     		ldr	r3, [r3]
 613              		.loc 1 432 26 view .LVU217
 614 00aa 41F21402 		movw	r2, #4116
 615 00ae 9A58     		ldr	r2, [r3, r2]
 616              		.loc 1 432 6 view .LVU218
 617 00b0 12F0800F 		tst	r2, #128
 618 00b4 07D0     		beq	.L20
 433:Core/Src/ethernetif.c ****   {
 434:Core/Src/ethernetif.c ****     /* Clear RBUS ETHERNET DMA flag */
 435:Core/Src/ethernetif.c ****     EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 619              		.loc 1 435 5 is_stmt 1 view .LVU219
 620              		.loc 1 435 31 is_stmt 0 view .LVU220
 621 00b6 41F21402 		movw	r2, #4116
 622 00ba 8021     		movs	r1, #128
 623              	.LVL61:
 624              		.loc 1 435 31 view .LVU221
 625 00bc 9950     		str	r1, [r3, r2]
 436:Core/Src/ethernetif.c ****     /* Resume DMA reception */
 437:Core/Src/ethernetif.c ****     EthHandle.Instance->DMARPDR = 0;
 626              		.loc 1 437 5 is_stmt 1 view .LVU222
 627              		.loc 1 437 33 is_stmt 0 view .LVU223
 628 00be 41F20802 		movw	r2, #4104
 629 00c2 0021     		movs	r1, #0
 630 00c4 9950     		str	r1, [r3, r2]
 631              	.LVL62:
 632              	.L20:
 438:Core/Src/ethernetif.c ****   }
 439:Core/Src/ethernetif.c ****   return p;
 440:Core/Src/ethernetif.c **** }
 633              		.loc 1 440 1 view .LVU224
 634 00c6 5046     		mov	r0, r10
 635 00c8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 636              	.LVL63:
 637              	.L29:
 375:Core/Src/ethernetif.c ****   
 638              		.loc 1 375 12 view .LVU225
 639 00cc 4FF0000A 		mov	r10, #0
 640 00d0 F9E7     		b	.L20
 641              	.L35:
 642 00d2 00BF     		.align	2
 643              	.L34:
 644 00d4 00000000 		.word	EthHandle
 645              		.cfi_endproc
 646              	.LFE175:
 648              		.section	.text.ethernetif_input,"ax",%progbits
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 22


 649              		.align	1
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv5-sp-d16
 655              	ethernetif_input:
 656              	.LVL64:
 657              	.LFB176:
 441:Core/Src/ethernetif.c **** 
 442:Core/Src/ethernetif.c **** /**
 443:Core/Src/ethernetif.c ****   * @brief This function is the ethernetif_input task, it is processed when a packet 
 444:Core/Src/ethernetif.c ****   * is ready to be read from the interface. It uses the function low_level_input() 
 445:Core/Src/ethernetif.c ****   * that should handle the actual reception of bytes from the network
 446:Core/Src/ethernetif.c ****   * interface. Then the type of the received packet is determined and
 447:Core/Src/ethernetif.c ****   * the appropriate input function is called.
 448:Core/Src/ethernetif.c ****   *
 449:Core/Src/ethernetif.c ****   * @param netif the lwip network interface structure for this ethernetif
 450:Core/Src/ethernetif.c ****   */
 451:Core/Src/ethernetif.c **** void ethernetif_input( void const * argument )
 452:Core/Src/ethernetif.c **** {
 658              		.loc 1 452 1 is_stmt 1 view -0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		.loc 1 452 1 is_stmt 0 view .LVU227
 663 0000 38B5     		push	{r3, r4, r5, lr}
 664              	.LCFI5:
 665              		.cfi_def_cfa_offset 16
 666              		.cfi_offset 3, -16
 667              		.cfi_offset 4, -12
 668              		.cfi_offset 5, -8
 669              		.cfi_offset 14, -4
 670 0002 0546     		mov	r5, r0
 453:Core/Src/ethernetif.c ****   struct pbuf *p;
 671              		.loc 1 453 3 is_stmt 1 view .LVU228
 454:Core/Src/ethernetif.c ****   struct netif *netif = (struct netif *) argument;
 672              		.loc 1 454 3 view .LVU229
 673              	.LVL65:
 674              	.L37:
 455:Core/Src/ethernetif.c ****   
 456:Core/Src/ethernetif.c ****   for( ;; )
 675              		.loc 1 456 3 view .LVU230
 457:Core/Src/ethernetif.c ****   {
 458:Core/Src/ethernetif.c ****     if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 676              		.loc 1 458 5 view .LVU231
 677              		.loc 1 458 9 is_stmt 0 view .LVU232
 678 0004 4FF0FF31 		mov	r1, #-1
 679 0008 0E4B     		ldr	r3, .L43
 680 000a 1868     		ldr	r0, [r3]
 681 000c FFF7FEFF 		bl	osSemaphoreWait
 682              	.LVL66:
 683              		.loc 1 458 8 view .LVU233
 684 0010 0028     		cmp	r0, #0
 685 0012 F7D1     		bne	.L37
 686 0014 07E0     		b	.L39
 687              	.LVL67:
 688              	.L42:
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 23


 459:Core/Src/ethernetif.c ****     {
 460:Core/Src/ethernetif.c ****       do
 461:Core/Src/ethernetif.c ****       {
 462:Core/Src/ethernetif.c ****         LOCK_TCPIP_CORE();
 463:Core/Src/ethernetif.c **** 
 464:Core/Src/ethernetif.c ****         p = low_level_input( netif );
 465:Core/Src/ethernetif.c ****         if (p != NULL)
 466:Core/Src/ethernetif.c ****         {
 467:Core/Src/ethernetif.c ****           if (netif->input( p, netif) != ERR_OK )
 468:Core/Src/ethernetif.c ****           {
 469:Core/Src/ethernetif.c ****             pbuf_free(p);
 689              		.loc 1 469 13 is_stmt 1 view .LVU234
 690 0016 2046     		mov	r0, r4
 691 0018 FFF7FEFF 		bl	pbuf_free
 692              	.LVL68:
 693              	.L38:
 470:Core/Src/ethernetif.c ****           }
 471:Core/Src/ethernetif.c ****         }
 472:Core/Src/ethernetif.c **** 
 473:Core/Src/ethernetif.c ****         UNLOCK_TCPIP_CORE();
 694              		.loc 1 473 9 view .LVU235
 695 001c 0A48     		ldr	r0, .L43+4
 696 001e FFF7FEFF 		bl	sys_mutex_unlock
 697              	.LVL69:
 474:Core/Src/ethernetif.c **** 
 475:Core/Src/ethernetif.c ****       }while(p!=NULL);
 698              		.loc 1 475 13 view .LVU236
 699              		.loc 1 475 7 is_stmt 0 view .LVU237
 700 0022 002C     		cmp	r4, #0
 701 0024 EED0     		beq	.L37
 702              	.LVL70:
 703              	.L39:
 460:Core/Src/ethernetif.c ****       {
 704              		.loc 1 460 7 is_stmt 1 view .LVU238
 462:Core/Src/ethernetif.c **** 
 705              		.loc 1 462 9 view .LVU239
 706 0026 0848     		ldr	r0, .L43+4
 707 0028 FFF7FEFF 		bl	sys_mutex_lock
 708              	.LVL71:
 464:Core/Src/ethernetif.c ****         if (p != NULL)
 709              		.loc 1 464 9 view .LVU240
 464:Core/Src/ethernetif.c ****         if (p != NULL)
 710              		.loc 1 464 13 is_stmt 0 view .LVU241
 711 002c 2846     		mov	r0, r5
 712 002e FFF7FEFF 		bl	low_level_input
 713              	.LVL72:
 465:Core/Src/ethernetif.c ****         {
 714              		.loc 1 465 9 is_stmt 1 view .LVU242
 465:Core/Src/ethernetif.c ****         {
 715              		.loc 1 465 12 is_stmt 0 view .LVU243
 716 0032 0446     		mov	r4, r0
 717 0034 0028     		cmp	r0, #0
 718 0036 F1D0     		beq	.L38
 467:Core/Src/ethernetif.c ****           {
 719              		.loc 1 467 11 is_stmt 1 view .LVU244
 467:Core/Src/ethernetif.c ****           {
 720              		.loc 1 467 20 is_stmt 0 view .LVU245
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 24


 721 0038 2B69     		ldr	r3, [r5, #16]
 467:Core/Src/ethernetif.c ****           {
 722              		.loc 1 467 15 view .LVU246
 723 003a 2946     		mov	r1, r5
 724 003c 9847     		blx	r3
 725              	.LVL73:
 467:Core/Src/ethernetif.c ****           {
 726              		.loc 1 467 14 view .LVU247
 727 003e 0028     		cmp	r0, #0
 728 0040 ECD0     		beq	.L38
 729 0042 E8E7     		b	.L42
 730              	.L44:
 731              		.align	2
 732              	.L43:
 733 0044 00000000 		.word	.LANCHOR3
 734 0048 00000000 		.word	lock_tcpip_core
 735              		.cfi_endproc
 736              	.LFE176:
 738              		.section	.text.HAL_ETH_MspInit,"ax",%progbits
 739              		.align	1
 740              		.global	HAL_ETH_MspInit
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu fpv5-sp-d16
 746              	HAL_ETH_MspInit:
 747              	.LVL74:
 748              	.LFB171:
 134:Core/Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 749              		.loc 1 134 1 is_stmt 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 48
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 134:Core/Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 753              		.loc 1 134 1 is_stmt 0 view .LVU249
 754 0000 30B5     		push	{r4, r5, lr}
 755              	.LCFI6:
 756              		.cfi_def_cfa_offset 12
 757              		.cfi_offset 4, -12
 758              		.cfi_offset 5, -8
 759              		.cfi_offset 14, -4
 760 0002 8DB0     		sub	sp, sp, #52
 761              	.LCFI7:
 762              		.cfi_def_cfa_offset 64
 135:Core/Src/ethernetif.c ****   
 763              		.loc 1 135 3 is_stmt 1 view .LVU250
 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 764              		.loc 1 138 3 view .LVU251
 765              	.LBB2:
 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 766              		.loc 1 138 3 view .LVU252
 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 767              		.loc 1 138 3 view .LVU253
 768 0004 354C     		ldr	r4, .L47
 769 0006 236B     		ldr	r3, [r4, #48]
 770 0008 43F00103 		orr	r3, r3, #1
 771 000c 2363     		str	r3, [r4, #48]
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 25


 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 772              		.loc 1 138 3 view .LVU254
 773 000e 236B     		ldr	r3, [r4, #48]
 774 0010 03F00103 		and	r3, r3, #1
 775 0014 0093     		str	r3, [sp]
 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 776              		.loc 1 138 3 view .LVU255
 777 0016 009B     		ldr	r3, [sp]
 778              	.LBE2:
 138:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 779              		.loc 1 138 3 view .LVU256
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 780              		.loc 1 139 3 view .LVU257
 781              	.LBB3:
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 782              		.loc 1 139 3 view .LVU258
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 783              		.loc 1 139 3 view .LVU259
 784 0018 236B     		ldr	r3, [r4, #48]
 785 001a 43F00203 		orr	r3, r3, #2
 786 001e 2363     		str	r3, [r4, #48]
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 787              		.loc 1 139 3 view .LVU260
 788 0020 236B     		ldr	r3, [r4, #48]
 789 0022 03F00203 		and	r3, r3, #2
 790 0026 0193     		str	r3, [sp, #4]
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 791              		.loc 1 139 3 view .LVU261
 792 0028 019B     		ldr	r3, [sp, #4]
 793              	.LBE3:
 139:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 794              		.loc 1 139 3 view .LVU262
 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 795              		.loc 1 140 3 view .LVU263
 796              	.LBB4:
 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 797              		.loc 1 140 3 view .LVU264
 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 798              		.loc 1 140 3 view .LVU265
 799 002a 236B     		ldr	r3, [r4, #48]
 800 002c 43F00403 		orr	r3, r3, #4
 801 0030 2363     		str	r3, [r4, #48]
 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 802              		.loc 1 140 3 view .LVU266
 803 0032 236B     		ldr	r3, [r4, #48]
 804 0034 03F00403 		and	r3, r3, #4
 805 0038 0293     		str	r3, [sp, #8]
 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 806              		.loc 1 140 3 view .LVU267
 807 003a 029B     		ldr	r3, [sp, #8]
 808              	.LBE4:
 140:Core/Src/ethernetif.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 809              		.loc 1 140 3 view .LVU268
 141:Core/Src/ethernetif.c **** 
 810              		.loc 1 141 3 view .LVU269
 811              	.LBB5:
 141:Core/Src/ethernetif.c **** 
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 26


 812              		.loc 1 141 3 view .LVU270
 141:Core/Src/ethernetif.c **** 
 813              		.loc 1 141 3 view .LVU271
 814 003c 236B     		ldr	r3, [r4, #48]
 815 003e 43F04003 		orr	r3, r3, #64
 816 0042 2363     		str	r3, [r4, #48]
 141:Core/Src/ethernetif.c **** 
 817              		.loc 1 141 3 view .LVU272
 818 0044 236B     		ldr	r3, [r4, #48]
 819 0046 03F04003 		and	r3, r3, #64
 820 004a 0393     		str	r3, [sp, #12]
 141:Core/Src/ethernetif.c **** 
 821              		.loc 1 141 3 view .LVU273
 822 004c 039B     		ldr	r3, [sp, #12]
 823              	.LBE5:
 141:Core/Src/ethernetif.c **** 
 824              		.loc 1 141 3 view .LVU274
 158:Core/Src/ethernetif.c ****   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 825              		.loc 1 158 3 view .LVU275
 158:Core/Src/ethernetif.c ****   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 826              		.loc 1 158 28 is_stmt 0 view .LVU276
 827 004e 0323     		movs	r3, #3
 828 0050 0A93     		str	r3, [sp, #40]
 159:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pull = GPIO_NOPULL; 
 829              		.loc 1 159 3 is_stmt 1 view .LVU277
 159:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pull = GPIO_NOPULL; 
 830              		.loc 1 159 27 is_stmt 0 view .LVU278
 831 0052 0223     		movs	r3, #2
 832 0054 0893     		str	r3, [sp, #32]
 160:Core/Src/ethernetif.c ****   GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 833              		.loc 1 160 3 is_stmt 1 view .LVU279
 160:Core/Src/ethernetif.c ****   GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 834              		.loc 1 160 27 is_stmt 0 view .LVU280
 835 0056 0025     		movs	r5, #0
 836 0058 0995     		str	r5, [sp, #36]
 161:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 837              		.loc 1 161 3 is_stmt 1 view .LVU281
 161:Core/Src/ethernetif.c ****   GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 838              		.loc 1 161 32 is_stmt 0 view .LVU282
 839 005a 0B23     		movs	r3, #11
 840 005c 0B93     		str	r3, [sp, #44]
 162:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 841              		.loc 1 162 3 is_stmt 1 view .LVU283
 162:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 842              		.loc 1 162 26 is_stmt 0 view .LVU284
 843 005e 8623     		movs	r3, #134
 844 0060 0793     		str	r3, [sp, #28]
 163:Core/Src/ethernetif.c ****   
 845              		.loc 1 163 3 is_stmt 1 view .LVU285
 846 0062 07A9     		add	r1, sp, #28
 847 0064 1E48     		ldr	r0, .L47+4
 848              	.LVL75:
 163:Core/Src/ethernetif.c ****   
 849              		.loc 1 163 3 is_stmt 0 view .LVU286
 850 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 851              	.LVL76:
 166:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 27


 852              		.loc 1 166 3 is_stmt 1 view .LVU287
 166:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 853              		.loc 1 166 26 is_stmt 0 view .LVU288
 854 006a 4FF40053 		mov	r3, #8192
 855 006e 0793     		str	r3, [sp, #28]
 167:Core/Src/ethernetif.c ****   
 856              		.loc 1 167 3 is_stmt 1 view .LVU289
 857 0070 07A9     		add	r1, sp, #28
 858 0072 1C48     		ldr	r0, .L47+8
 859 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 860              	.LVL77:
 170:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 861              		.loc 1 170 3 view .LVU290
 170:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 862              		.loc 1 170 26 is_stmt 0 view .LVU291
 863 0078 3223     		movs	r3, #50
 864 007a 0793     		str	r3, [sp, #28]
 171:Core/Src/ethernetif.c **** 
 865              		.loc 1 171 3 is_stmt 1 view .LVU292
 866 007c 07A9     		add	r1, sp, #28
 867 007e 1A48     		ldr	r0, .L47+12
 868 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 869              	.LVL78:
 174:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 870              		.loc 1 174 3 view .LVU293
 174:Core/Src/ethernetif.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 871              		.loc 1 174 26 is_stmt 0 view .LVU294
 872 0084 42F60403 		movw	r3, #10244
 873 0088 0793     		str	r3, [sp, #28]
 175:Core/Src/ethernetif.c ****   
 874              		.loc 1 175 3 is_stmt 1 view .LVU295
 875 008a 07A9     		add	r1, sp, #28
 876 008c 1748     		ldr	r0, .L47+16
 877 008e FFF7FEFF 		bl	HAL_GPIO_Init
 878              	.LVL79:
 178:Core/Src/ethernetif.c ****   HAL_NVIC_EnableIRQ(ETH_IRQn);
 879              		.loc 1 178 3 view .LVU296
 880 0092 2A46     		mov	r2, r5
 881 0094 0721     		movs	r1, #7
 882 0096 3D20     		movs	r0, #61
 883 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 884              	.LVL80:
 179:Core/Src/ethernetif.c ****   
 885              		.loc 1 179 3 view .LVU297
 886 009c 3D20     		movs	r0, #61
 887 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 888              	.LVL81:
 182:Core/Src/ethernetif.c **** }
 889              		.loc 1 182 3 view .LVU298
 182:Core/Src/ethernetif.c **** }
 890              		.loc 1 182 3 view .LVU299
 891              	.LBB6:
 182:Core/Src/ethernetif.c **** }
 892              		.loc 1 182 3 view .LVU300
 182:Core/Src/ethernetif.c **** }
 893              		.loc 1 182 3 view .LVU301
 894 00a2 236B     		ldr	r3, [r4, #48]
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 28


 895 00a4 43F00073 		orr	r3, r3, #33554432
 896 00a8 2363     		str	r3, [r4, #48]
 182:Core/Src/ethernetif.c **** }
 897              		.loc 1 182 3 view .LVU302
 898 00aa 236B     		ldr	r3, [r4, #48]
 899 00ac 03F00073 		and	r3, r3, #33554432
 900 00b0 0493     		str	r3, [sp, #16]
 182:Core/Src/ethernetif.c **** }
 901              		.loc 1 182 3 view .LVU303
 902 00b2 049B     		ldr	r3, [sp, #16]
 903              	.LBE6:
 182:Core/Src/ethernetif.c **** }
 904              		.loc 1 182 3 view .LVU304
 182:Core/Src/ethernetif.c **** }
 905              		.loc 1 182 3 view .LVU305
 906              	.LBB7:
 182:Core/Src/ethernetif.c **** }
 907              		.loc 1 182 3 view .LVU306
 182:Core/Src/ethernetif.c **** }
 908              		.loc 1 182 3 view .LVU307
 909 00b4 236B     		ldr	r3, [r4, #48]
 910 00b6 43F08063 		orr	r3, r3, #67108864
 911 00ba 2363     		str	r3, [r4, #48]
 182:Core/Src/ethernetif.c **** }
 912              		.loc 1 182 3 view .LVU308
 913 00bc 236B     		ldr	r3, [r4, #48]
 914 00be 03F08063 		and	r3, r3, #67108864
 915 00c2 0593     		str	r3, [sp, #20]
 182:Core/Src/ethernetif.c **** }
 916              		.loc 1 182 3 view .LVU309
 917 00c4 059B     		ldr	r3, [sp, #20]
 918              	.LBE7:
 182:Core/Src/ethernetif.c **** }
 919              		.loc 1 182 3 view .LVU310
 182:Core/Src/ethernetif.c **** }
 920              		.loc 1 182 3 view .LVU311
 921              	.LBB8:
 182:Core/Src/ethernetif.c **** }
 922              		.loc 1 182 3 view .LVU312
 182:Core/Src/ethernetif.c **** }
 923              		.loc 1 182 3 view .LVU313
 924 00c6 236B     		ldr	r3, [r4, #48]
 925 00c8 43F00063 		orr	r3, r3, #134217728
 926 00cc 2363     		str	r3, [r4, #48]
 182:Core/Src/ethernetif.c **** }
 927              		.loc 1 182 3 view .LVU314
 928 00ce 236B     		ldr	r3, [r4, #48]
 929 00d0 03F00063 		and	r3, r3, #134217728
 930 00d4 0693     		str	r3, [sp, #24]
 182:Core/Src/ethernetif.c **** }
 931              		.loc 1 182 3 view .LVU315
 932 00d6 069B     		ldr	r3, [sp, #24]
 933              	.LBE8:
 182:Core/Src/ethernetif.c **** }
 934              		.loc 1 182 3 view .LVU316
 182:Core/Src/ethernetif.c **** }
 935              		.loc 1 182 3 view .LVU317
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 29


 183:Core/Src/ethernetif.c **** 
 936              		.loc 1 183 1 is_stmt 0 view .LVU318
 937 00d8 0DB0     		add	sp, sp, #52
 938              	.LCFI8:
 939              		.cfi_def_cfa_offset 12
 940              		@ sp needed
 941 00da 30BD     		pop	{r4, r5, pc}
 942              	.L48:
 943              		.align	2
 944              	.L47:
 945 00dc 00380240 		.word	1073887232
 946 00e0 00000240 		.word	1073872896
 947 00e4 00040240 		.word	1073873920
 948 00e8 00080240 		.word	1073874944
 949 00ec 00180240 		.word	1073879040
 950              		.cfi_endproc
 951              	.LFE171:
 953              		.section	.text.HAL_ETH_RxCpltCallback,"ax",%progbits
 954              		.align	1
 955              		.global	HAL_ETH_RxCpltCallback
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 959              		.fpu fpv5-sp-d16
 961              	HAL_ETH_RxCpltCallback:
 962              	.LVL82:
 963              	.LFB172:
 191:Core/Src/ethernetif.c ****   osSemaphoreRelease(s_xSemaphore);
 964              		.loc 1 191 1 is_stmt 1 view -0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 191:Core/Src/ethernetif.c ****   osSemaphoreRelease(s_xSemaphore);
 968              		.loc 1 191 1 is_stmt 0 view .LVU320
 969 0000 08B5     		push	{r3, lr}
 970              	.LCFI9:
 971              		.cfi_def_cfa_offset 8
 972              		.cfi_offset 3, -8
 973              		.cfi_offset 14, -4
 192:Core/Src/ethernetif.c **** }
 974              		.loc 1 192 3 is_stmt 1 view .LVU321
 975 0002 024B     		ldr	r3, .L51
 976 0004 1868     		ldr	r0, [r3]
 977              	.LVL83:
 192:Core/Src/ethernetif.c **** }
 978              		.loc 1 192 3 is_stmt 0 view .LVU322
 979 0006 FFF7FEFF 		bl	osSemaphoreRelease
 980              	.LVL84:
 193:Core/Src/ethernetif.c **** 
 981              		.loc 1 193 1 view .LVU323
 982 000a 08BD     		pop	{r3, pc}
 983              	.L52:
 984              		.align	2
 985              	.L51:
 986 000c 00000000 		.word	.LANCHOR3
 987              		.cfi_endproc
 988              	.LFE172:
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 30


 990              		.section	.rodata.ethernetif_init.str1.4,"aMS",%progbits,1
 991              		.align	2
 992              	.LC4:
 993 0000 436F7265 		.ascii	"Core/Src/ethernetif.c\000"
 993      2F537263 
 993      2F657468 
 993      65726E65 
 993      7469662E 
 994 0016 0000     		.align	2
 995              	.LC5:
 996 0018 6E657469 		.ascii	"netif != NULL\000"
 996      6620213D 
 996      204E554C 
 996      4C00
 997 0026 0000     		.align	2
 998              	.LC6:
 999 0028 41737365 		.ascii	"Assertion \"%s\" failed at line %d in %s\012\000"
 999      7274696F 
 999      6E202225 
 999      73222066 
 999      61696C65 
 1000              		.section	.text.ethernetif_init,"ax",%progbits
 1001              		.align	1
 1002              		.global	ethernetif_init
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv5-sp-d16
 1008              	ethernetif_init:
 1009              	.LVL85:
 1010              	.LFB177:
 476:Core/Src/ethernetif.c ****     }
 477:Core/Src/ethernetif.c ****   }
 478:Core/Src/ethernetif.c **** }
 479:Core/Src/ethernetif.c **** 
 480:Core/Src/ethernetif.c **** /**
 481:Core/Src/ethernetif.c ****   * @brief Should be called at the beginning of the program to set up the
 482:Core/Src/ethernetif.c ****   * network interface. It calls the function low_level_init() to do the
 483:Core/Src/ethernetif.c ****   * actual setup of the hardware.
 484:Core/Src/ethernetif.c ****   *
 485:Core/Src/ethernetif.c ****   * This function should be passed as a parameter to netif_add().
 486:Core/Src/ethernetif.c ****   *
 487:Core/Src/ethernetif.c ****   * @param netif the lwip network interface structure for this ethernetif
 488:Core/Src/ethernetif.c ****   * @return ERR_OK if the loopif is initialized
 489:Core/Src/ethernetif.c ****   *         ERR_MEM if private data couldn't be allocated
 490:Core/Src/ethernetif.c ****   *         any other err_t on error
 491:Core/Src/ethernetif.c ****   */
 492:Core/Src/ethernetif.c **** err_t ethernetif_init(struct netif *netif)
 493:Core/Src/ethernetif.c **** {
 1011              		.loc 1 493 1 is_stmt 1 view -0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              		.loc 1 493 1 is_stmt 0 view .LVU325
 1016 0000 10B5     		push	{r4, lr}
 1017              	.LCFI10:
 1018              		.cfi_def_cfa_offset 8
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 31


 1019              		.cfi_offset 4, -8
 1020              		.cfi_offset 14, -4
 494:Core/Src/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 1021              		.loc 1 494 3 is_stmt 1 view .LVU326
 1022              		.loc 1 494 3 view .LVU327
 1023 0002 0446     		mov	r4, r0
 1024 0004 70B1     		cbz	r0, .L56
 1025              	.LVL86:
 1026              	.L54:
 1027              		.loc 1 494 3 discriminator 3 view .LVU328
 1028              		.loc 1 494 3 discriminator 3 view .LVU329
 495:Core/Src/ethernetif.c **** 
 496:Core/Src/ethernetif.c **** #if LWIP_NETIF_HOSTNAME
 497:Core/Src/ethernetif.c ****   /* Initialize interface hostname */
 498:Core/Src/ethernetif.c ****   netif->hostname = "lwip";
 499:Core/Src/ethernetif.c **** #endif /* LWIP_NETIF_HOSTNAME */
 500:Core/Src/ethernetif.c **** 
 501:Core/Src/ethernetif.c ****   netif->name[0] = IFNAME0;
 1029              		.loc 1 501 3 discriminator 3 view .LVU330
 1030              		.loc 1 501 18 is_stmt 0 discriminator 3 view .LVU331
 1031 0006 7323     		movs	r3, #115
 1032 0008 84F83230 		strb	r3, [r4, #50]
 502:Core/Src/ethernetif.c ****   netif->name[1] = IFNAME1;
 1033              		.loc 1 502 3 is_stmt 1 discriminator 3 view .LVU332
 1034              		.loc 1 502 18 is_stmt 0 discriminator 3 view .LVU333
 1035 000c 7423     		movs	r3, #116
 1036 000e 84F83330 		strb	r3, [r4, #51]
 503:Core/Src/ethernetif.c **** 
 504:Core/Src/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 505:Core/Src/ethernetif.c ****    * You can instead declare your own function an call etharp_output()
 506:Core/Src/ethernetif.c ****    * from it if you have to do some checks before sending (e.g. if link
 507:Core/Src/ethernetif.c ****    * is available...) */
 508:Core/Src/ethernetif.c ****   netif->output = etharp_output;
 1037              		.loc 1 508 3 is_stmt 1 discriminator 3 view .LVU334
 1038              		.loc 1 508 17 is_stmt 0 discriminator 3 view .LVU335
 1039 0012 084B     		ldr	r3, .L57
 1040 0014 6361     		str	r3, [r4, #20]
 509:Core/Src/ethernetif.c ****   netif->linkoutput = low_level_output;
 1041              		.loc 1 509 3 is_stmt 1 discriminator 3 view .LVU336
 1042              		.loc 1 509 21 is_stmt 0 discriminator 3 view .LVU337
 1043 0016 084B     		ldr	r3, .L57+4
 1044 0018 A361     		str	r3, [r4, #24]
 510:Core/Src/ethernetif.c **** 
 511:Core/Src/ethernetif.c ****   /* initialize the hardware */
 512:Core/Src/ethernetif.c ****   low_level_init(netif);
 1045              		.loc 1 512 3 is_stmt 1 discriminator 3 view .LVU338
 1046 001a 2046     		mov	r0, r4
 1047 001c FFF7FEFF 		bl	low_level_init
 1048              	.LVL87:
 513:Core/Src/ethernetif.c **** 
 514:Core/Src/ethernetif.c ****   return ERR_OK;
 1049              		.loc 1 514 3 discriminator 3 view .LVU339
 515:Core/Src/ethernetif.c **** }
 1050              		.loc 1 515 1 is_stmt 0 discriminator 3 view .LVU340
 1051 0020 0020     		movs	r0, #0
 1052 0022 10BD     		pop	{r4, pc}
 1053              	.LVL88:
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 32


 1054              	.L56:
 494:Core/Src/ethernetif.c **** 
 1055              		.loc 1 494 3 is_stmt 1 discriminator 1 view .LVU341
 494:Core/Src/ethernetif.c **** 
 1056              		.loc 1 494 3 discriminator 1 view .LVU342
 1057 0024 054B     		ldr	r3, .L57+8
 1058 0026 4FF4F772 		mov	r2, #494
 1059 002a 0549     		ldr	r1, .L57+12
 1060 002c 0548     		ldr	r0, .L57+16
 1061              	.LVL89:
 494:Core/Src/ethernetif.c **** 
 1062              		.loc 1 494 3 is_stmt 0 discriminator 1 view .LVU343
 1063 002e FFF7FEFF 		bl	printf
 1064              	.LVL90:
 1065 0032 E8E7     		b	.L54
 1066              	.L58:
 1067              		.align	2
 1068              	.L57:
 1069 0034 00000000 		.word	etharp_output
 1070 0038 00000000 		.word	low_level_output
 1071 003c 00000000 		.word	.LC4
 1072 0040 18000000 		.word	.LC5
 1073 0044 28000000 		.word	.LC6
 1074              		.cfi_endproc
 1075              	.LFE177:
 1077              		.section	.text.sys_now,"ax",%progbits
 1078              		.align	1
 1079              		.global	sys_now
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv5-sp-d16
 1085              	sys_now:
 1086              	.LFB178:
 516:Core/Src/ethernetif.c **** 
 517:Core/Src/ethernetif.c **** /**
 518:Core/Src/ethernetif.c ****   * @brief  Returns the current time in milliseconds
 519:Core/Src/ethernetif.c ****   *         when LWIP_TIMERS == 1 and NO_SYS == 1
 520:Core/Src/ethernetif.c ****   * @param  None
 521:Core/Src/ethernetif.c ****   * @retval Time
 522:Core/Src/ethernetif.c ****   */
 523:Core/Src/ethernetif.c **** u32_t sys_now(void)
 524:Core/Src/ethernetif.c **** {
 1087              		.loc 1 524 1 is_stmt 1 view -0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091 0000 08B5     		push	{r3, lr}
 1092              	.LCFI11:
 1093              		.cfi_def_cfa_offset 8
 1094              		.cfi_offset 3, -8
 1095              		.cfi_offset 14, -4
 525:Core/Src/ethernetif.c ****   return HAL_GetTick();
 1096              		.loc 1 525 3 view .LVU345
 1097              		.loc 1 525 10 is_stmt 0 view .LVU346
 1098 0002 FFF7FEFF 		bl	HAL_GetTick
 1099              	.LVL91:
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 33


 526:Core/Src/ethernetif.c **** }
 1100              		.loc 1 526 1 view .LVU347
 1101 0006 08BD     		pop	{r3, pc}
 1102              		.cfi_endproc
 1103              	.LFE178:
 1105              		.comm	EthHandle,72,4
 1106              		.global	s_xSemaphore
 1107              		.global	Tx_Buff
 1108              		.global	Rx_Buff
 1109              		.global	DMATxDscrTab
 1110              		.global	DMARxDscrTab
 1111              		.section	.rodata
 1112              		.align	2
 1113              		.set	.LANCHOR0,. + 0
 1114              	.LC2:
 1115 0000 02000000 		.ascii	"\002\000\000\000\000\000"
 1115      0000
 1116 0006 0000     		.space	2
 1117              	.LC3:
 1118 0008 00000000 		.word	.LC0
 1119 000c 00000000 		.word	ethernetif_input
 1120 0010 0300     		.short	3
 1121 0012 0000     		.space	2
 1122 0014 00000000 		.word	0
 1123 0018 5E010000 		.word	350
 1124              		.section	.RxDecripSection,"aw"
 1125              		.align	2
 1126              		.set	.LANCHOR2,. + 0
 1129              	DMARxDscrTab:
 1130 0000 00000000 		.space	128
 1130      00000000 
 1130      00000000 
 1130      00000000 
 1130      00000000 
 1131              		.section	.RxarraySection,"aw"
 1132              		.align	2
 1135              	Rx_Buff:
 1136 0000 00000000 		.space	6096
 1136      00000000 
 1136      00000000 
 1136      00000000 
 1136      00000000 
 1137              		.section	.TxDescripSection,"aw"
 1138              		.align	2
 1139              		.set	.LANCHOR1,. + 0
 1142              	DMATxDscrTab:
 1143 0000 00000000 		.space	128
 1143      00000000 
 1143      00000000 
 1143      00000000 
 1143      00000000 
 1144              		.section	.TxarraySection,"aw"
 1145              		.align	2
 1148              	Tx_Buff:
 1149 0000 00000000 		.space	6096
 1149      00000000 
 1149      00000000 
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 34


 1149      00000000 
 1149      00000000 
 1150              		.section	.bss.s_xSemaphore,"aw",%nobits
 1151              		.align	2
 1152              		.set	.LANCHOR3,. + 0
 1155              	s_xSemaphore:
 1156 0000 00000000 		.space	4
 1157              		.text
 1158              	.Letext0:
 1159              		.file 2 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\machine\\_default_ty
 1160              		.file 3 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 1161              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1162              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1163              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1164              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1165              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1166              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1167              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1168              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1169              		.file 12 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 1170              		.file 13 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 1171              		.file 14 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\st
 1172              		.file 15 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 1173              		.file 16 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\stdlib.h"
 1174              		.file 17 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\time.h"
 1175              		.file 18 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 1176              		.file 19 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\ctype.h"
 1177              		.file 20 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 1178              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1179              		.file 22 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1180              		.file 23 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1181              		.file 24 "Middlewares/Third_Party/LwIP/system/arch/sys_arch.h"
 1182              		.file 25 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 1183              		.file 26 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 1184              		.file 27 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 1185              		.file 28 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 1186              		.file 29 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 1187              		.file 30 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 1188              		.file 31 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 1189              		.file 32 "Middlewares/Third_Party/LwIP/src/include/lwip/tcpip.h"
 1190              		.file 33 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
 1191              		.file 34 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
 1192              		.file 35 "d:\\dev\\gcc-arm-none-eabi\\9_2019_q4-major\\arm-none-eabi\\include\\stdio.h"
 1193              		.file 36 "Middlewares/Third_Party/LwIP/src/include/lwip/sys.h"
 1194              		.file 37 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1195              		.file 38 "<built-in>"
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 ethernetif.c
D:\Dev\msys64\tmp\cc3tfjJn.s:15     .rodata.str1.4:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:22     .text.low_level_output:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:29     .text.low_level_output:00000000 low_level_output
D:\Dev\msys64\tmp\cc3tfjJn.s:222    .text.low_level_output:000000b8 $d
                            *COM*:00000048 EthHandle
D:\Dev\msys64\tmp\cc3tfjJn.s:227    .text.low_level_init:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:233    .text.low_level_init:00000000 low_level_init
D:\Dev\msys64\tmp\cc3tfjJn.s:394    .text.low_level_init:000000c8 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1148   .TxarraySection:00000000 Tx_Buff
D:\Dev\msys64\tmp\cc3tfjJn.s:1135   .RxarraySection:00000000 Rx_Buff
D:\Dev\msys64\tmp\cc3tfjJn.s:407    .text.low_level_input:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:413    .text.low_level_input:00000000 low_level_input
D:\Dev\msys64\tmp\cc3tfjJn.s:644    .text.low_level_input:000000d4 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:649    .text.ethernetif_input:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:655    .text.ethernetif_input:00000000 ethernetif_input
D:\Dev\msys64\tmp\cc3tfjJn.s:733    .text.ethernetif_input:00000044 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:739    .text.HAL_ETH_MspInit:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:746    .text.HAL_ETH_MspInit:00000000 HAL_ETH_MspInit
D:\Dev\msys64\tmp\cc3tfjJn.s:945    .text.HAL_ETH_MspInit:000000dc $d
D:\Dev\msys64\tmp\cc3tfjJn.s:954    .text.HAL_ETH_RxCpltCallback:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:961    .text.HAL_ETH_RxCpltCallback:00000000 HAL_ETH_RxCpltCallback
D:\Dev\msys64\tmp\cc3tfjJn.s:986    .text.HAL_ETH_RxCpltCallback:0000000c $d
D:\Dev\msys64\tmp\cc3tfjJn.s:991    .rodata.ethernetif_init.str1.4:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1001   .text.ethernetif_init:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:1008   .text.ethernetif_init:00000000 ethernetif_init
D:\Dev\msys64\tmp\cc3tfjJn.s:1069   .text.ethernetif_init:00000034 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1078   .text.sys_now:00000000 $t
D:\Dev\msys64\tmp\cc3tfjJn.s:1085   .text.sys_now:00000000 sys_now
D:\Dev\msys64\tmp\cc3tfjJn.s:1155   .bss.s_xSemaphore:00000000 s_xSemaphore
D:\Dev\msys64\tmp\cc3tfjJn.s:1142   .TxDescripSection:00000000 DMATxDscrTab
D:\Dev\msys64\tmp\cc3tfjJn.s:1129   .RxDecripSection:00000000 DMARxDscrTab
D:\Dev\msys64\tmp\cc3tfjJn.s:1112   .rodata:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1125   .RxDecripSection:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1132   .RxarraySection:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1138   .TxDescripSection:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1145   .TxarraySection:00000000 $d
D:\Dev\msys64\tmp\cc3tfjJn.s:1151   .bss.s_xSemaphore:00000000 $d

UNDEFINED SYMBOLS
memcpy
HAL_ETH_TransmitFrame
HAL_ETH_Init
HAL_ETH_DMATxDescListInit
HAL_ETH_DMARxDescListInit
osSemaphoreCreate
osThreadCreate
HAL_ETH_Start
HAL_ETH_GetReceivedFrame_IT
pbuf_alloc
osSemaphoreWait
pbuf_free
sys_mutex_unlock
sys_mutex_lock
lock_tcpip_core
HAL_GPIO_Init
ARM GAS  D:\Dev\msys64\tmp\cc3tfjJn.s 			page 36


HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osSemaphoreRelease
printf
etharp_output
HAL_GetTick
